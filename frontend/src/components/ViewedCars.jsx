import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import CarCard from "./CarCard";
import { io } from "socket.io-client";
import { fetchViewedCars, removeViewedCar } from "../slices/viewedCarsSlice"; // ‚úÖ –î–æ–¥–∞–Ω–æ Redux action
import "./CarList.css";
import { url } from "../slices/api";
import { useTheme } from "../components/ThemeContext";
import SearchBar from "./SearchBar";
// import { FaTrash } from "react-icons/fa"; // –Ü–∫–æ–Ω–∫–∞ "—Å–º—ñ—Ç–Ω–∏–∫–∞"
// import { FaTimes } from "react-icons/fa"; // –Ü–∫–æ–Ω–∫–∞ "–•"

const socket = io(url);

const ViewedCars = () => {
  const dispatch = useDispatch();
  const viewedCars = useSelector((state) => state.viewedCars.viewedCars); // ‚úÖ –û—Ç—Ä–∏–º—É—î–º–æ –∑ Redux –Ω–∞–∑–≤–∞ –∑—Ä—ñ–∑—É viewedCars —ñ –Ω–∞–∑–≤–∞ –º–∞—Å–∏–≤—É viewedCars
  // console.log("VIEWED CARS :", viewedCars);
  const { theme } = useTheme();
  // const [currentUser, setCurrentUser] = useState(null);
  const currentUser = useSelector((state) => state.auth);
  console.log("CURRENT USER : ", currentUser)

  const [selectedCars, setSelectedCars] = useState([]);

  const [filteredViewed, setFilteredViewed] = useState([]);
  const [carName, setCarName] = useState("");
  const [carModel, setCarModel] = useState("");
  const [year, setYear] = useState("");

  useEffect(() => {
    dispatch(fetchViewedCars()); // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ –∞–≤—Ç–æ –∑ —Å–µ—Ä–≤–µ—Ä–∞

    // üîπ –ü—ñ–¥–ø–∏—Å—É—î–º–æ—Å—è –Ω–∞ WebSocket –ø–æ–¥—ñ—ó
    socket.on("viewed-updated", () => {
      dispatch(fetchViewedCars()); // üîπ –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –≤ Redux
    });

    return () => {
      socket.off("viewed-updated");
      socket.disconnect();
    };
  }, [dispatch]);

  useEffect(() => {
   
    let filtered = [...viewedCars];

    if (carName) {
      filtered = filtered.filter((unit) =>
        unit.carId.brand.toLowerCase().includes(carName.toLowerCase())
      );
    }

    if (carModel) {
      filtered = filtered.filter((fav) =>
        fav.carId.name.toLowerCase().includes(carModel.toLowerCase())
      );
    }

    if (year) {
      filtered = filtered.filter((unit) =>
        unit.carId.year.toString().startsWith(year.toString())
      );
    }

    setFilteredViewed(filtered);
  }, [carName, carModel, year, viewedCars]);

  //  const handleRemoveViewedCar = async (carId) => {
  //   await dispatch(removeViewedCar(carId)); // üîπ –í–∏–¥–∞–ª—è—î–º–æ –∞–≤—Ç–æ
  // };
//   const handleRemoveViewedCar = (carId) => {
//   const confirmDelete = window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö?");
//   if (confirmDelete) {
//     dispatch(removeViewedCar(carId));
//   }
  // };
  
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
  const toggleSelectCar = (carId) => {
    setSelectedCars((prevSelected) =>
      prevSelected.includes(carId)
        ? prevSelected.filter((id) => id !== carId)
        : [...prevSelected, carId]
    );
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–±–æ—Ä—É –≤—Å—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
  const selectAllCars = () => {
    if (selectedCars.length === filteredViewed.length) {
      setSelectedCars([]); // –Ø–∫—â–æ –≤—Å—ñ –≤–∏–±—Ä–∞–Ω—ñ ‚Äî –∑–Ω—ñ–º–∞—î–º–æ –≤–∏–±—ñ—Ä
    } else {
      setSelectedCars(filteredViewed.map((unit) => unit.carId._id));
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
  const handleRemoveSelectedCars = () => {
    const confirmDelete = window.confirm(
      "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ?"
    );
    if (confirmDelete) {
      selectedCars.forEach((carId) => dispatch(removeViewedCar(carId)));
      setSelectedCars([]); // –û—á–∏—Å—Ç–∏—Ç–∏ –≤–∏–±—ñ—Ä –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    }
  };

  const handleFilterChange = (newFilterValue, filterType) => {
  if (filterType === "brand") setCarName(newFilterValue);
  if (filterType === "model") setCarModel(newFilterValue);
  if (filterType === "year") setYear(newFilterValue);

  // setPage(1);  // –û–ù–û–í–õ–Æ–Ñ–ú–û –°–¢–û–†–Ü–ù–ö–£ –ù–ê –ü–ï–†–®–£ –ü–†–ò –ó–ú–Ü–ù–Ü –§–Ü–õ–¨–¢–†–ê
};


  return (
    <>
    <SearchBar
        carName={carName}
        setCarName={setCarName}
        carModel={carModel}
        setCarModel={setCarModel}
        year={year}
        setYear={setYear}
        handleFilterChange={handleFilterChange}
      />
      <div className="cars-container">
      <h1>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>

      {filteredViewed.length > 0 && selectedCars.length > 0 && (
        <div className={`selection-controls ${theme}`}>
          <button onClick={selectAllCars} className="select-all-button">
            {selectedCars.length === filteredViewed.length ? "–ó–Ω—è—Ç–∏ –≤–∏–±—ñ—Ä" : "–í–∏–±—Ä–∞—Ç–∏ –≤—Å—ñ"}
          </button>
          <button onClick={handleRemoveSelectedCars} className="delete-selected-button">
            –í–∏–¥–∞–ª–∏—Ç–∏ –≤–∏–±—Ä–∞–Ω—ñ ({selectedCars.length})
          </button>
        </div>
      )}
      <div className="car-list">
        {/* {viewedCars.length > 0 ? (
          viewedCars.map((unit) => <CarCard key={unit.carId._id} car={unit.carId} />)
        ) : (
          <p className="no-cars-message">–í–∏ —â–µ –Ω–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ.</p>
        )} */}
        {filteredViewed.length > 0 ? (
          filteredViewed.map((unit) => (
            <div key={unit.carId._id} className="car-card-container">
              <input
                type="checkbox"
                checked={selectedCars.includes(unit.carId._id)}
                onChange={() => toggleSelectCar(unit.carId._id)}
                className="car-checkbox"
              />
              <CarCard key={unit.carId._id} car={unit.carId} currentUser={currentUser}/>
              {/* <button
                className="remove-viewed-button"
                onClick={() => handleRemoveViewedCar(unit.carId._id)}
              >
                <FaTimes className="close-icon" />
                <span className="delete-text">–í–∏–ª—É—á–∏—Ç–∏</span>
              </button> */}
            </div>
          ))
        ) : (
          <p className="no-cars-message">–í–∏ —â–µ –Ω–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ.</p>
        )}
      </div>
    </div>
    </>
    
  );
};

export default ViewedCars;

// import React, { useEffect, useState } from "react";
// import CarCard from "./CarCard";
// import { io } from "socket.io-client";
// import "./CarList.css"; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —Å—Ç–∏–ª—å, —â–æ –π –¥–ª—è CarList
// import { url } from "../slices/api";

// const socket = io(url); // –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π –±–µ–∫–µ–Ω–¥

// const ViewedCars = () => {
//   const [viewedCars, setViewedCars] = useState([]);

//   // useEffect(() => {
//   //   // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –∞–≤—Ç–æ –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ö–æ–≤–∏—â–∞
//   //   const storedViewedCars = JSON.parse(localStorage.getItem("viewedCars")) || [];
//   //   setViewedCars(storedViewedCars);

//   //   // –û—Ç—Ä–∏–º—É—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ WebSocket
//   //   socket.on("viewed-car", () => {
//   //     const updatedViewedCars = JSON.parse(localStorage.getItem("viewedCars")) || [];
//   //     setViewedCars(updatedViewedCars);
//   //   });

//   //   return () => {
//   //     socket.off("viewed-car");
//   //     socket.disconnect();
//   //   };
//   // }, []);

//   // ViewedCars –±—É–¥–µ –æ–Ω–æ–≤–ª—é–≤–∞—Ç–∏—Å—è –Ω–µ —Ç—ñ–ª—å–∫–∏ —á–µ—Ä–µ–∑ WebSocket, –∞ –π –∫–æ–ª–∏ localStorage
//   // –∑–º—ñ–Ω–∏—Ç—å—Å—è.
//   useEffect(() => {
//   const updateViewedCars = () => {
//     const storedViewedCars = JSON.parse(localStorage.getItem("viewedCars")) || [];
//     setViewedCars(storedViewedCars);
//   };

//   updateViewedCars(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ

//   // –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ WebSocket
//   socket.on("viewed-car", updateViewedCars);

//   // üì¢ –î–æ–¥–∞—î–º–æ —Å–ª—É—Ö–∞—á–∞ `localStorage`
//   window.addEventListener("storage", updateViewedCars);

//   return () => {
//     socket.off("viewed-car", updateViewedCars);
//     window.removeEventListener("storage", updateViewedCars);
//     socket.disconnect();
//   };
// }, []);

//   return (
//     <div className="cars-container">
//       <h1>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>
//       <div className="car-list">
//         {viewedCars.length > 0 ? (
//           viewedCars.map((car) => <CarCard key={car._id} car={car} />)
//         ) : (
//           <p className="no-cars-message">–í–∏ —â–µ –Ω–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ.</p>
//         )}
//       </div>
//     </div>
//   );
// };

// export default ViewedCars;

// import React, { useEffect, useState } from "react";
// import CarCard from "./CarCard";
// import "./CarList.css"; // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ–π —Å–∞–º–∏–π —Å—Ç–∏–ª—å, —â–æ –π –¥–ª—è CarList

// const ViewedCars = () => {
//   const [viewedCars, setViewedCars] = useState([]);

//   useEffect(() => {
//     const storedViewedCars = JSON.parse(localStorage.getItem("viewedCars")) || [];
//     setViewedCars(storedViewedCars);
//   }, []);

//   return (
//     <div className="cars-container">
//       <h1>–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>
//       <div className="car-list">
//         {viewedCars.length > 0 ? (
//           viewedCars.map((car) => <CarCard key={car._id} car={car} />)
//         ) : (
//           <p className="no-cars-message">–í–∏ —â–µ –Ω–µ –ø–µ—Ä–µ–≥–ª—è–¥–∞–ª–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ.</p>
//         )}
//       </div>
//     </div>
//   );
// };

// export default ViewedCars;
