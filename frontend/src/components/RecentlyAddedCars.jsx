import React, { useEffect, useState } from "react";
import axios from "axios";
import io from "socket.io-client"; // WebSocket –∫–ª—ñ—î–Ω—Ç
import "./RecentlyAddedCars.css";
import { setHeaders, url } from "../slices/api";
import { useNavigate } from "react-router-dom";
import { useTheme } from "../components/ThemeContext";
import { useSelector } from "react-redux";

// const socket = io(url); // üì¢ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –∑'—î–¥–Ω–∞–Ω–Ω—è —Å—é–¥–∏, —â–æ–± –Ω–µ —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –Ω–æ–≤–µ –∫–æ–∂–Ω–æ–≥–æ —Ä–∞–∑—É

const RecentlyAddedCars = () => {
  const [recentCars, setRecentCars] = useState([]);
  const [favoriteCarIds, setFavoriteCarIds] = useState([]);
  const navigate = useNavigate();
  const { theme } = useTheme();

  const token = useSelector((state) => state.auth.token); // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î
  // –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —Å–∏—Å—Ç–µ–º—ñ (–æ—Ç—Ä–∏–º—É—î —Ç–æ–∫–µ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Redux). –¶–µ –Ω–∞–π–∫—Ä–∞—â–∏–π —Å–ø–æ—Å—ñ–±,
  // –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –≥–ª–æ–±–∞–ª—å–Ω–∏–π —Å—Ç–µ–π—Ç —ñ –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø–æ–¥—ñ–π —á–∏
  // localStorage

  // –û—á–∏—Å—Ç–∫–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ
  useEffect(() => {
    if (!token) {
      setFavoriteCarIds([]);
    }
  }, [token]); // –°–ø—Ä–∞—Ü—å–æ–≤—É—î –ø—Ä–∏ –∑–º—ñ–Ω—ñ token (—Ç–æ–±—Ç–æ –ø—Ä–∏ –≤–∏—Ö–æ–¥—ñ)

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è "–æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤" –∑–∞ –¥–∞—Ç–æ—é
  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–±–æ—Ä—É –∞–≤—Ç–æ, —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 20 –¥–Ω—ñ–≤ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é)
  const filterRecentCars = (cars) => {
    const now = new Date();
    const timeApproved = new Date();
    timeApproved.setDate(now.getDate() - 60);

    return cars.filter((car) => {
      const createdAt = new Date(car.createdAt);
      return createdAt >= timeApproved;
    });
  };

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ —Ç–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö (–¥–ª—è —ñ–Ω–¥–∏–∫–∞—Ü—ñ—ó)
  const fetchInitialData = async () => {
    try {
      if (!token) return; // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π
      const [carsResponse, favoritesResponse] = await Promise.all([
        axios.get(`${url}/cars`),
        axios.get(`${url}/favorites`, setHeaders()),
      ]);

      setRecentCars(filterRecentCars(carsResponse.data));
      setFavoriteCarIds(
        favoritesResponse.data.map((favorite) => favorite.car._id)
      );
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö", error);
    }
  };

  // –í–∏–∫–ª–∏–∫–∞—î–º–æ fetchInitialData –ø—Ä–∏ –∑–º—ñ–Ω—ñ `token` (–≤—Ö—ñ–¥/–≤–∏—Ö—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞)
  useEffect(() => {
    if (token) {
      fetchInitialData();
    }
  }, [token]); // –¢–µ–ø–µ—Ä –∑–∞–ø–∏—Ç –æ–Ω–æ–≤–ª—é—î—Ç—å—Å—è –ø—Ä–∏ –≤—Ö–æ–¥—ñ —Ç–∞ –≤–∏—Ö–æ–¥—ñ

  useEffect(() => {
    // fetchInitialData();

    // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
    const socket = io(url);

    // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó
    socket.on("new-car", (newCar) => {
      setRecentCars((prevCars) => {
        const updatedCars = [newCar, ...prevCars];
        return filterRecentCars(updatedCars);
      });
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
    socket.on("favorite-updated", ({ carId, isFavorite }) => {
      setFavoriteCarIds((prevFavorites) => {
        if (isFavorite) {
          return [...prevFavorites, carId]; // –î–æ–¥–∞—î–º–æ —É–ª—é–±–ª–µ–Ω–∏–π
        } else {
          return prevFavorites.filter((id) => id !== carId); // –í–∏–¥–∞–ª—è—î–º–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
        }
      });
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
    socket.on("car-deleted", (deletedCarId) => {
      setRecentCars((prevCars) =>
        prevCars.filter((car) => car._id !== deletedCarId)
      );
    });

    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      socket.off("new-car");
      socket.off("favorite-updated");
      socket.off("car-deleted");
      socket.disconnect();
    };
    // return () => {
    //   socket.disconnect();
    // };
  }, []);

  // // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
  // const handleDetailsClick = (carId) => {
  //   navigate(`/cars/${carId}`);
  // };
  const handleDetailsClick = async (carId) => {
    const socket = io(url);
    try {
      // üîπ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–≤—Ç–æ –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
      await axios.post(
        `${url}/viewed-cars`,
        { carId: carId },
        setHeaders()
      );

      // üîπ –Ø–∫—â–æ –∑–∞–ø–∏—Ç —É—Å–ø—ñ—à–Ω–∏–π ‚Äì –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ WebSocket –ø–æ–¥—ñ—é
      socket.emit("viewed-updated");

      // üîπ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ
      navigate(`/cars/${carId}`);
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ:", error.message);
    }
  };
 

  return (
    <div className={`recently-added-cars ${theme}`}>
      {recentCars.length > 0 ? (
        recentCars.map((car) => {
          const isFavorite = favoriteCarIds.includes(car._id);
          return (
            <div key={car._id} className="recently-added-car-container">
              <img
                src={car.imageUrl}
                alt={car.name}
                className="recently-added-car-image"
                title={car.name}
                onClick={() => handleDetailsClick(car._id)}
              />
              {isFavorite && <div className="favorite-indicator">‚ú®</div>}
            </div>
          );
        })
      ) : (
        // <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
        <div className="no-cars-placeholder">
          <p>–ù–æ–≤–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î</p>
        </div>
      )}
    </div>
  );
};

export default RecentlyAddedCars;

// if (recentCars.length === 0) {
  //   return (
  //     <div className={`recently-added-cars ${theme}`}>
  //       <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
  //     </div>
  //   );
  // }

  // return (
  //   <div className={`recently-added-cars ${theme}`}>
  //     {recentCars.map((car) => {
  //       const isFavorite = favoriteCarIds.includes(car._id);
  //       return (
  //         <div key={car._id} className="recently-added-car-container">
  //           <img
  //             src={car.imageUrl}
  //             alt={car.name}
  //             className="recently-added-car-image"
  //             title={car.name}
  //             onClick={() => handleDetailsClick(car._id)}
  //           />
  //           {isFavorite && <div className="favorite-indicator">‚ú®</div>}
  //         </div>
  //       );
  //     })}
  //   </div>
  // );

// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import io from "socket.io-client"; // WebSocket –∫–ª—ñ—î–Ω—Ç  21 01 25
// import "./RecentlyAddedCars.css";
// import { setHeaders, url } from "../slices/api";
// import { useNavigate } from "react-router-dom";
// import { useTheme } from "../components/ThemeContext";

// const RecentlyAddedCars = () => {
//   const [recentCars, setRecentCars] = useState([]);
//   const [favoriteCarIds, setFavoriteCarIds] = useState([]); // –°–ø–∏—Å–æ–∫ ID —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ

//   const navigate = useNavigate();
//   const { theme } = useTheme(); // –î–æ–¥–∞—î–º–æ —Ç–µ–º—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É

//   const handleDetailsClick = (carId) => {
//     navigate(`/cars/${carId}`); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É –¥–µ—Ç–∞–ª–µ–π
//   };

//   useEffect(() => {
//     const fetchRecentCars = async () => {
//       try {
//         const response = await axios.get(`${url}/cars`);
//         const cars = response.data;
//         console.log("CARS IN RECENTLY ADDET CARS", cars)

//         const now = new Date();
//         const sevenDaysAgo = new Date();
//         sevenDaysAgo.setDate(now.getDate() - 7);

//         const filteredCars = cars.filter((car) => {
//           const createdAt = new Date(car.createdAt);
//           return createdAt >= sevenDaysAgo;
//         });

//         setRecentCars(filteredCars);
//       } catch (error) {
//         console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤", error);
//       }
//     };

//     const fetchFavorites = async () => {
//       try {
//         const response = await axios.get(`${url}/favorites`, setHeaders());
//         const favoriteIds = response.data.map((favorite) => favorite.car._id); // –û—Ç—Ä–∏–º—É—î–º–æ ID —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ
//         setFavoriteCarIds(favoriteIds);
//       } catch (error) {
//         console.error("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ", error);
//       }
//     };

//     fetchRecentCars();
//     fetchFavorites();
//     // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
//   const socket = io(url);

//   // –°–ª—É—Ö–∞—î–º–æ –ø–æ–¥—ñ—é "new-car", —è–∫–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞
//   socket.on("new-car", (newCar) => {
//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —Å–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –¥–æ–¥–∞–Ω–∏—Ö
//     setRecentCars((prevCars) => {
//       const now = new Date();
//       const sevenDaysAgo = new Date();
//       sevenDaysAgo.setDate(now.getDate() - 7);

//       const createdAt = new Date(newCar.createdAt);
//       if (createdAt >= sevenDaysAgo) {
//         return [newCar, ...prevCars]; // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–æ —Å–ø–∏—Å–∫—É
//       }
//       return prevCars;
//     });
//   });

//   // –ß–∏—Å—Ç–∏–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
//   return () => {
//     socket.disconnect();
//   };
//   }, []);

//   // if (recentCars.length === 0) return "No Cars"; // –ù–µ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—Ç–∏, —è–∫—â–æ –Ω–µ–º–∞—î –∞–≤—Ç–æ
//   if (recentCars.length === 0) {
//     return (
//       <div className={`recently-added-cars ${theme}`}>
//         <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
//       </div>
//     );
//   }

//   return (
//     <div className={`recently-added-cars ${theme}`}>
//       {recentCars.map((car) => (
//         <div key={car._id} className="recently-added-car-container">
//           <img
//             // key={car._id}
//             src={car.imageUrl}
//             alt={car.name}
//             className="recently-added-car-image"
//             title={car.name}
//             onClick={() => handleDetailsClick(car._id)}
//           />
//           {favoriteCarIds.includes(car._id) && (
//             <div className="favorite-indicator">‚ú®</div>
//           )} {/* –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä */}
//         </div>

//       ))}
//     </div>
//   );
// };

// export default RecentlyAddedCars;
