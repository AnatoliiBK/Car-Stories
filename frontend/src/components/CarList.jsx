// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import io from "socket.io-client";
// import "./CarList.css";
// import CarCard from "./CarCard";
// import SearchBar from "./SearchBar";
// import { url, setHeaders } from "../slices/api";
// import PageNavigation from "./PageNavigation";

// const CarList = () => {
//   const [cars, setCars] = useState([]);
//   const [favorites, setFavorites] = useState([]);
//   const [carName, setCarName] = useState(""); // –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –º–∞—Ä–∫–æ—é
//   const [carModel, setCarModel] = useState(""); // –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –º–æ–¥–µ–ª–ª—é
//   const [year, setYear] = useState(""); // –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ —Ä–æ–∫–æ–º
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState("");
//   const [isAdmin, setIsAdmin] = useState(false);
//   const [currentUser, setCurrentUser] = useState(null);

//   const [page, setPage] = useState(1); // –ü–æ—Ç–æ—á–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
//   const [limit] = useState(2); // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∞–≤—Ç–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
//   const [totalPages, setTotalPages] = useState(1); // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–æ—Ä—ñ–Ω–æ–∫

//   useEffect(() => {
//     const fetchCarsAndFavorites = async () => {
//       try {
//          // –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–æ –∑–∞–ø–∏—Ç—É
//       const queryParams = new URLSearchParams({
//         brand: carName,
//         model: carModel,
//         year: year,
//         sort: "year", // –∞–±–æ —ñ–Ω—à–µ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
//         page: page,
//         limit: limit,
//       });
//         const [carResponse, favoriteResponse, userResponse] = await Promise.all([
//           // axios.get(
//           //   `${url}/cars/car-filtered?brand=${carName}&model=${carModel}&year=${year}&page=${page}&limit=${limit}`
//           // ),
//           axios.get(`${url}/cars/car-filtered?${queryParams.toString()}`), // –¥–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∏ –¥–æ –∑–∞–ø–∏—Ç—É
//           axios.get(`${url}/favorites`, setHeaders()),
//           axios.get(`${url}/users/me`, setHeaders()),
//         ]);

//         setCars(carResponse.data.cars);
//         setTotalPages(carResponse.data.totalPages);
//         setFavorites(favoriteResponse.data.map((fav) => fav.car?._id));
//         setIsAdmin(userResponse.data.isAdmin);
//         setCurrentUser(userResponse.data);
//         setLoading(false);
//       } catch (err) {
//         console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", err);
//         setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è.");
//         setLoading(false);
//       }
//     };

//     fetchCarsAndFavorites();

//     // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
//     const socket = io(url);

//     const handleNewCar = (newCar) => {
//       setCars((prevCars) => {
//         if (prevCars.some((car) => car._id === newCar._id)) return prevCars;
//         return [newCar, ...prevCars];
//       });
//     };

//     const handleCarDeleted = (deletedCarId) => {
//       setCars((prevCars) => prevCars.filter((car) => car._id !== deletedCarId));
//     };

//     socket.on("new-car", handleNewCar);
//     socket.on("car-deleted", handleCarDeleted);

//     return () => {
//       socket.off("new-car", handleNewCar);
//       socket.off("car-deleted", handleCarDeleted);
//       socket.disconnect();
//     };
//   }, [page, carName, carModel, year, limit]); // –í–∏–∫–ª–∏–∫–∞—Ç–∏ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤

//   const handleFilterChange = (newFilterValue, filterType) => {
//   if (filterType === "brand") setCarName(newFilterValue);
//   if (filterType === "model") setCarModel(newFilterValue);
//   if (filterType === "year") setYear(newFilterValue);

//   setPage(1);  // –û–ù–û–í–õ–Æ–Ñ–ú–û –°–¢–û–†–Ü–ù–ö–£ –ù–ê –ü–ï–†–®–£ –ü–†–ò –ó–ú–Ü–ù–Ü –§–Ü–õ–¨–¢–†–ê
// };

//   const handleDeleteCar = async (carId) => {
//     const confirmDelete = window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å?");
//     if (!confirmDelete) return;

//     try {
//       await axios.delete(`${url}/cars/${carId}`, setHeaders());
//       setCars((prevCars) => prevCars.filter((car) => car._id !== carId));
//       alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
//     } catch (err) {
//       console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", err);
//       alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å.");
//     }
//   };

//   if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
//   if (error) return <p>{error}</p>;

//   return (
//     <>
//       <SearchBar
//         carName={carName}
//         setCarName={setCarName}
//         carModel={carModel}
//         setCarModel={setCarModel}
//         year={year}
//         setYear={setYear}
//         handleFilterChange={handleFilterChange} // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é —É –ø—Ä–æ–ø—Å
//       />
//       <div className="cars-container">
//         <h1>–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>
//         <div className="car-list">
//           {cars.length > 0 ? (
//             cars.map((unit) => (
//               <CarCard
//                 key={unit._id}
//                 car={unit}
//                 isFavorite={favorites.includes(unit._id)}
//                 isAdmin={isAdmin}
//                 currentUser={currentUser}
//                 onDelete={handleDeleteCar}
//               />
//             ))
//           ) : (
//             <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
//           )}
//         </div>

//         {cars.length > 0 && totalPages > 1 && (
//           <PageNavigation
//         page={page}
//         totalPages={totalPages}
//         setPage={setPage}
//       />
//         )}
//       </div>
//     </>
//   );
// };

// export default CarList;

import React, { useEffect, useRef, useState } from "react";
import axios from "axios";
import io from "socket.io-client";
import CarCard from "./CarCard";
import InlineSearchBar from "./InlineSearchBar";
import { url, setHeaders } from "../slices/api";
import PageNavigation from "./PageNavigation";
import Triangle from "./Triangle";
import "./CarList.css";
import { useTheme } from "../components/ThemeContext";

const CarList = () => {
  const [cars, setCars] = useState([]);
  const [favorites, setFavorites] = useState([]);
  const [isAdmin, setIsAdmin] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const { theme } = useTheme();

  const [page, setPage] = useState(1);
  const [limit] = useState(2);
  const [totalPages, setTotalPages] = useState(1);

  const wrapperRef = useRef(null);
  const searchBarRef = useRef(null);

  // üîç –§—ñ–ª—å—Ç—Ä–∏
  const [filters, setFilters] = useState({
    brand: "",
    model: "",
    yearFrom: "",
    yearTo: "",
  });

  const areFiltersApplied =
    filters.brand || filters.model || filters.yearFrom || filters.yearTo;

  const [filteredCount, setFilteredCount] = useState(0);
  const [isSearchBarOpen, setIsSearchBarOpen] = useState(false); // –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –ø–æ—à—É–∫–æ–≤–æ—ó –ø–∞–Ω–µ–ª—ñ

  const fetchCarsAndFavorites = async () => {
    try {
      const queryParams = new URLSearchParams({
        brand: filters.brand,
        model: filters.model,
        yearFrom: filters.yearFrom,
        yearTo: filters.yearTo,
        page,
        limit,
      });

      const [carResponse, favoriteResponse, userResponse] = await Promise.all([
        axios.get(`${url}/cars/car-filtered-range?${queryParams.toString()}`),
        axios.get(`${url}/favorites`, setHeaders()),
        axios.get(`${url}/users/me`, setHeaders()),
      ]);

      setCars(carResponse.data.cars);
      // setFilteredCount(carResponse.data.cars.length);
      setFilteredCount(carResponse.data.totalFiltered);
      setTotalPages(carResponse.data.totalPages);
      setFavorites(favoriteResponse.data.map((fav) => fav.car?._id));
      setIsAdmin(userResponse.data.isAdmin);
      setCurrentUser(userResponse.data);
      setLoading(false);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", err);
      setError(
        "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤. –ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è."
      );
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchCarsAndFavorites();
  }, [filters, page]);

  useEffect(() => {
    if (searchBarRef.current) {
      if (isSearchBarOpen) {
        searchBarRef.current.classList.add("open");
        searchBarRef.current.classList.remove("closed");
      } else {
        searchBarRef.current.classList.add("closed");
        searchBarRef.current.classList.remove("open");
      }
    }
  }, [isSearchBarOpen]);

  // üß† –†–µ–∞–ª—å–Ω–∏–π —á–∞—Å
  useEffect(() => {
    const socket = io(url);

    const handleNewCar = (newCar) => {
      setCars((prevCars) => {
        if (prevCars.some((car) => car._id === newCar._id)) return prevCars;
        return [newCar, ...prevCars];
      });
    };

    const handleCarDeleted = (deletedCarId) => {
      setCars((prevCars) => prevCars.filter((car) => car._id !== deletedCarId));
    };

    socket.on("new-car", handleNewCar);
    socket.on("car-deleted", handleCarDeleted);

    return () => {
      socket.off("new-car", handleNewCar);
      socket.off("car-deleted", handleCarDeleted);
      socket.disconnect();
    };
  }, []);

  // –ó–∞–∫—Ä–∏—Ç—Ç—è –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –ø–æ—à—É–∫–æ–≤–∏–º –±–ª–æ–∫–æ–º
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {
        setIsSearchBarOpen(false);
      }
    };

    document.addEventListener("mousedown", handleClickOutside);
    return () => document.removeEventListener("mousedown", handleClickOutside);
  }, []);

  const handleFilterChange = (newFilters) => {
    setFilters(newFilters);
    setPage(1);
  };

  const handleDeleteCar = async (carId) => {
    const confirmDelete = window.confirm(
      "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å?"
    );
    if (!confirmDelete) return;

    try {
      await axios.delete(`${url}/cars/${carId}`, setHeaders());
      setCars((prevCars) => prevCars.filter((car) => car._id !== carId));
      alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", err);
      alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å.");
    }
  };

  if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
  if (error) return <p>{error}</p>;

  return (
    <>
      <div ref={wrapperRef} className="inline-search-wrapper">
        <Triangle
          isOpen={isSearchBarOpen} // <- —Å—Ç–∞–Ω –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
          onToggle={() => setIsSearchBarOpen((prev) => !prev)} // –ü–µ—Ä–µ–º–∏–∫–∞—î–º–æ —Å—Ç–∞–Ω
        />
        {!isSearchBarOpen && areFiltersApplied && (
          <div className={`filter-summary ${theme}`}>
            <span className="counter-value">({filteredCount})</span>, –∑–≥—ñ–¥–Ω–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–∏—Ö –¥–∞–Ω–∏—Ö
          </div>
        )}
        {/* –£–º–æ–≤–Ω–æ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ InlineSearchBar */}
        {/* {isSearchBarOpen && (
        <InlineSearchBar onFilterChange={handleFilterChange} count={filteredCount} />
      )} */}
        {/* <InlineSearchBar ref={searchBarRef} onFilterChange={handleFilterChange} count={filteredCount} /> */}
        <InlineSearchBar
          ref={searchBarRef}
          onFilterChange={handleFilterChange}
          count={filteredCount}
          brand={filters.brand}
          model={filters.model}
          yearFrom={filters.yearFrom}
          yearTo={filters.yearTo}
        />
      </div>

      {/* <InlineSearchBar onFilterChange={handleFilterChange} count={filteredCount} /> */}
      <div className="cars-container">
        <h1>–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>
        <div className="car-list">
          {cars.length > 0 ? (
            cars.map((unit) => (
              <CarCard
                key={unit._id}
                car={unit}
                isFavorite={favorites.includes(unit._id)}
                isAdmin={isAdmin}
                currentUser={currentUser}
                onDelete={handleDeleteCar}
              />
            ))
          ) : (
            <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
          )}
        </div>
        {cars.length > 0 && totalPages > 1 && (
          <PageNavigation
            page={page}
            totalPages={totalPages}
            setPage={setPage}
          />
        )}
      </div>
    </>
  );
};

export default CarList;

// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import io from "socket.io-client";
// import "./CarList.css";
// import CarCard from "./CarCard";
// import SearchBar from "./SearchBar";
// import { url, setHeaders } from "../slices/api";

// const CarList = () => {
//   const [cars, setCars] = useState([]);
//   const [filteredCars, setFilteredCars] = useState([]); // –í—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–≤—Ç–æ
//   const [favorites, setFavorites] = useState([]);
//   const [carName, setCarName] = useState(""); //–¥–ª—è –ø–æ—à—É–∫—É –∑–∞ –Ω–∞–∑–≤–æ—é
//   const [carModel, setCarModel] = useState("");
//   const [year, setYear] = useState(""); // –¥–ª—è –ø–æ—à—É–∫—É –∑–∞ —Ä–æ–∫–æ–º
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState("");
//   const [isAdmin, setIsAdmin] = useState(false); // 26 01 25
//   const [currentUser, setCurrentUser] = useState(null);

//   useEffect(() => {
//     const fetchCarsAndFavorites = async () => {
//       try {
//         const [carResponse, favoriteResponse, userResponse] = await Promise.all(
//           [
//             axios.get(`${url}/cars`),
//             axios.get(`${url}/favorites`, setHeaders()),
//             axios.get(`${url}/users/me`, setHeaders()), // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–ª—å 26 01 25
//           ]
//         );

//         setCars(carResponse.data);
//         setFavorites(favoriteResponse.data.map((fav) => fav.car?._id)); // ID —É–ª—é–±–ª–µ–Ω–∏—Ö
//         setIsAdmin(userResponse.data.isAdmin); // –†–æ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//         setCurrentUser(userResponse.data); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//         setLoading(false);
//       } catch (err) {
//         console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", err);
//         setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤.");
//         setLoading(false);
//       }
//     };

//     fetchCarsAndFavorites();

//     // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
//     const socket = io(url);

//     const handleNewCar = (newCar) => {
//       setCars((prevCars) => {
//         if (prevCars.some((car) => car._id === newCar._id)) return prevCars;
//         return [newCar, ...prevCars];
//       });
//     };

//     const handleCarDeleted = (deletedCarId) => {
//       setCars((prevCars) => prevCars.filter((car) => car._id !== deletedCarId));
//     };

//     socket.on("new-car", handleNewCar);
//     socket.on("car-deleted", handleCarDeleted);

//     return () => {
//       socket.off("new-car", handleNewCar);
//       socket.off("car-deleted", handleCarDeleted);
//       socket.disconnect();
//     };
//   }, []);

//   // –û–Ω–æ–≤–ª—é—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–≤—Ç–æ
//   useEffect(() => {
//     const applyFilters = () => {
//       let filtered = cars;

//       if (carName) {
//         filtered = filtered.filter((unit) =>
//           unit.brand.toLowerCase().includes(carName.toLowerCase())
//         );
//       }

//       if (carModel) {
//       filtered = filtered.filter((unit) =>
//         unit.name.toLowerCase().includes(carModel.toLowerCase())
//       );
//     }

//       if (year) {
//         filtered = filtered.filter((unit) =>
//           unit.year.toString().startsWith(year.toString())
//         );
//       }

//       setFilteredCars(filtered);
//     };

//     applyFilters();
//   }, [carName, carModel, year, cars]);

//   const handleDeleteCar = async (carId) => {
//   const confirmDelete = window.confirm("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å?");
//   if (!confirmDelete) return;

//   try {
//     // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö (—ñ–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É, —è–∫—â–æ –π–æ–≥–æ —Ç–∞–º –Ω–µ–º–∞—î)
//     try {
//       await axios.delete(`${url}/favorites/${carId}`, setHeaders());
//       setFavorites((prevFavorites) => prevFavorites.filter((id) => id !== carId));
//     } catch (favErr) {
//       if (favErr.response?.status !== 404) {
//         console.warn("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö:", favErr.response?.data || favErr.message);
//       }
//     }

//     // –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∞–º–æ–≥–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è
//     await axios.delete(`${url}/cars/${carId}`, setHeaders());

//     // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
//     setCars((prevCars) => prevCars.filter((car) => car._id !== carId));

//     alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
//   } catch (err) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", err.response?.data || err.message);
//     alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∞–±–æ –¥–∞–Ω—ñ.");
//   }
// };

//   if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
//   if (error) return <p>{error}</p>;

//   return (
//     <>
//       <SearchBar
//         carName={carName}
//         setCarName={setCarName}
//         carModel={carModel}
//         setCarModel={setCarModel}
//         year={year}
//         setYear={setYear}
//       />
//       <div className="cars-container">
//         <h1>–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>
//         <div className="car-list">
//           {filteredCars.length > 0 ? (
//             filteredCars.map((unit) => (
//               <CarCard
//                 key={unit._id}
//                 car={unit}
//                 isFavorite={favorites.includes(unit._id)}
//                 isAdmin={isAdmin}
//                 currentUser={currentUser} // –ü–µ—Ä–µ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
//                 onDelete={handleDeleteCar}
//               />
//             ))
//           ) : (
//             <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
//           )}
//         </div>
//       </div>
//     </>
//   );
// };

// export default CarList;

// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import io from "socket.io-client";
// import "./CarList.css";
// import CarCard from "./CarCard";
// import SearchBar from "./SearchBar"; // 25 01 25
// import { url, setHeaders } from "../slices/api";

// const CarList = () => {
//   const [cars, setCars] = useState([]);
//   const [filteredCars, setFilteredCars] = useState([]); // 25 01 25
//   const [favorites, setFavorites] = useState([]);
//   const [carName, setcarName] = useState(""); // 25 01 25
//   const [year, setYear] = useState(""); // 25 01 25
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState("");

//   useEffect(() => {
//     const fetchCarsAndFavorites = async () => {
//       try {
//         const [carResponse, favoriteResponse] = await Promise.all([
//           axios.get(`${url}/cars`),
//           axios.get(`${url}/favorites`, setHeaders()),
//         ]);

//         setCars(carResponse.data);
//         setFilteredCars(carResponse.data); // –°–ø–æ—á–∞—Ç–∫—É –ø–æ–∫–∞–∑—É—î–º–æ –≤—Å—ñ –∞–≤—Ç–æ // 25 01 25
//         setFavorites(favoriteResponse.data.map((fav) => fav.car._id)); // –û—Ç—Ä–∏–º—É—î–º–æ ID —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
//         setLoading(false);
//       } catch (err) {
//         console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:", err);
//         setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –∞–±–æ —É–ª—é–±–ª–µ–Ω–∏—Ö.");
//         setLoading(false);
//       }
//     };

//     fetchCarsAndFavorites();

//     // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
//     const socket = io(url);

//     // –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ—ó "new-car"
//     const handleNewCar = (newCar) => {
//       setCars((prevCars) => {
//         // –£–Ω–∏–∫–∞—î–º–æ –¥—É–±–ª—é–≤–∞–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
//         if (prevCars.some((car) => car._id === newCar._id)) {
//           return prevCars;
//         }
//         return [newCar, ...prevCars];
//       });
//     };

//     socket.on("new-car", handleNewCar);

//     // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–¥—ñ–π —Ç–∞ WebSocket –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
//     return () => {
//       socket.off("new-car", handleNewCar);
//       socket.disconnect();
//     };
//   }, []);

//   // –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ –∑–∞ –Ω–∞–∑–≤–æ—é —Ç–∞ —Ä–æ–∫–æ–º
//   useEffect(() => {
//     let filtered = cars;

//     if (carName) {
//       filtered = filtered.filter((car) =>
//         car.name.toLowerCase().includes(carName.toLowerCase())
//       );
//     }

//     if (year) {
//       filtered = filtered.filter((car) =>
//         car.year.toString().startsWith(year.toString())
//       );
//     }

//     setFilteredCars(filtered);
//   }, [carName, year, cars]);

//   if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
//   if (error) return <p>{error}</p>;

//   // 25 01 25
//   // if (cars.length === 0) {
//   //   return <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>;
//   // }

//   // 25 01 25 –∑–∞–≤–∞–∂–∞–ª–æ —Å—Ç–∏–ª—ñ–∑–∞—Ü—ñ—ó
//   // if (filteredCars.length === 0) {
//   //   return (
//   //     <div>
//   //       <SearchBar
//   //         carName={carName}
//   //         setcarName={setcarName}
//   //         year={year}
//   //         setYear={setYear}
//   //       />
//   //       <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
//   //     </div>
//   //   );
//   // }

//   return (
//     <>
//       <SearchBar
//         carName={carName}
//         setcarName={setcarName}
//         year={year}
//         setYear={setYear}
//       />
//       <div className={`cars-container`}>
//         <h1>–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ</h1>
//         <div className="car-list">
//           {filteredCars.length > 0 ? (
//             filteredCars.map((car) => (
//               <CarCard
//                 key={car._id}
//                 car={car}
//                 isFavorite={favorites.includes(car._id)} // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —É–ª—é–±–ª–µ–Ω–∏–π
//               />
//             ))
//           ) : (
//             <p className="no-cars-message">–ê–≤—Ç–æ–º–æ–±—ñ–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî</p>
//           )}
//         </div>
//       </div>
//     </>
//   );
// };

// export default CarList;

// import React, { useEffect, useState } from "react";
// import axios from "axios";
// import io from "socket.io-client"; // WebSocket –∫–ª—ñ—î–Ω—Ç
// import "./CarList.css";
// import CarCard from "./CarCard"; // –Ü–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É CarCard
// import { url, setHeaders } from "../slices/api";

// const CarList = () => {
//   const [cars, setCars] = useState([]);
//   const [favorites, setFavorites] = useState([]);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState("");
// console.log("CARS STATE ", cars)
//   useEffect(() => {
//     const fetchCarsAndFavorites = async () => {
//       try {
//         const carResponse = await axios.get(`${url}/cars`);
//         console.log("carRESPONSE IN LIST", carResponse.data)
//         setCars(carResponse.data);

//         // –ó–∞–ø–∏—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤
//         const favoriteResponse = await axios.get(
//           `${url}/favorites`,
//           setHeaders()
//         );
//         console.log("favoriteResponse IN LIST", favoriteResponse.data)
//         setFavorites(favoriteResponse.data.map((fav) => fav.car._id)); // –û—Ç—Ä–∏–º—É—î–º–æ
//         // —Ç—ñ–ª—å–∫–∏ ID —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤

//         setLoading(false);
//       } catch (err) {
//         setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ–º–æ–±—ñ–ª—ñ–≤ –∞–±–æ —É–ª—é–±–ª–µ–Ω–∏—Ö.");

//         setLoading(false);
//       }
//     };

//     fetchCarsAndFavorites();
//     // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ WebSocket
//     const socket = io(url);

//     // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–æ —Å–ø–∏—Å–∫—É –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–¥—ñ—ó
//     socket.on("new-car", (newCar) => {
//       setCars((prevCars) => [newCar, ...prevCars]); // –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –¥–æ —Å–ø–∏—Å–∫—É
//     });

//     // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–æ–∑–º–æ–Ω—Ç—É–≤–∞–Ω–Ω—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
//     return () => {
//       socket.disconnect();
//     };
//   }, []);

//   if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
//   if (error) return <p>{error}</p>;

//   return (
//     <div className="car-list">
//       {cars.map((car) => (
//         <CarCard
//           key={car._id}
//           car={car}
//           isFavorite={favorites.includes(car._id)}// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —É–ª—é–±–ª–µ–Ω–∏–π
//         />
//       ))}
//     </div>
//   );
// };

// export default CarList;

// const handleDeleteCar = async (carId) => {
//   const confirmDelete = window.confirm(
//   "–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å?"
// );

// if (!confirmDelete) return; // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å–∫–∞—Å–æ–≤—É—î, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ
//   try {
//     // // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó `cars`
//     // await axios.delete(`${url}/cars/${carId}`, setHeaders());

//     // // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó `favorites`
//     // await axios.delete(`${url}/favorites/car/${carId}`, setHeaders());
//      // –°–ø–æ—á–∞—Ç–∫—É –≤–∏–¥–∞–ª—è—î–º–æ —Ü–µ–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö
//   await axios.delete(`${url}/favorites/${carId}`, setHeaders());

//   // –ü–æ—Ç—ñ–º –≤–∏–¥–∞–ª—è—î–º–æ —Å–∞–º –∞–≤—Ç–æ–º–æ–±—ñ–ª—å –∑ –∫–æ–ª–µ–∫—Ü—ñ—ó cars
//   await axios.delete(`${url}/cars/${carId}`, setHeaders());

//     // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É `Cars`
//     setCars((prevCars) => prevCars.filter((car) => car._id !== carId));
//     alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");

//   //   // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É `Favorites` (—è–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏–π setFavorites)
//   // if (typeof setFavorites === "function") {
//   //   setFavorites((prevFavorites) =>
//   //     prevFavorites.filter((fav) => fav.car._id !== carId)
//   //   );
//   //   }

//     alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.");
//   } catch (err) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–æ–±—ñ–ª—è:", err);
//     alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ–º–æ–±—ñ–ª—å.");
//   }
// };
