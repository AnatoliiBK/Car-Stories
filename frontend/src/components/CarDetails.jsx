import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import axios from "axios";
import "./CarDetails.css"; // –°—Ç–∏–ª—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
import { url, setHeaders } from "../slices/api"; // –Ü–º–ø–æ—Ä—Ç setHeaders –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
import { useTheme } from "../components/ThemeContext";
import { io } from "socket.io-client";
import { FaArrowLeft } from "react-icons/fa"; // –Ü–∫–æ–Ω–∫–∞ —Å—Ç—Ä—ñ–ª–∫–∏
import AddCarSpecsModal from "./AddCarSpecsModal";

const socket = io(url); // –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ WebSocket –∫–ª—ñ—î–Ω—Ç

const CarDetails = () => {
  const { id } = useParams(); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ URL
  const [car, setCar] = useState(null);
  const [carSpecs, setCarSpecs] = useState(null);
  const [specsNotFound, setSpecsNotFound] = useState(false); // üÜï
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [isFavorite, setIsFavorite] = useState(false); // –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
  const [hovering, setHovering] = useState(false);
  const { theme } = useTheme(); // –î–æ–¥–∞—î–º–æ —Ç–µ–º—É –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É
  const navigate = useNavigate();
  const [showModal, setShowModal] = useState(false); // –°—Ç–µ–π—Ç –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª–∫–∏
  // const [vinCode, setVinCode] = useState(""); // ‚úÖ –î–æ–¥–∞—î–º–æ —Å—Ç–∞–Ω –¥–ª—è VIN-–∫–æ–¥—É

  useEffect(() => {
    const fetchCarDetails = async () => {
      try {
        const carResponse = await axios.get(`${url}/cars/${id}`); // API –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
        console.log("CAR IN DETAILS", carResponse.data);
        setCar(carResponse.data);

        try {
          const specsResponse = await axios.get(`${url}/car-specs/${id}`);
          console.log("CAR SPECS IN DETAILS", specsResponse.data);
          setCarSpecs(specsResponse.data);
          setSpecsNotFound(false);
        } catch (error) {
          if (error.response && error.response.status === 404) {
            setSpecsNotFound(true); // üü° –°–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π –Ω–µ–º–∞—î ‚Äî –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
          } else {
            console.error("Error fetching car specs:", error);
          }
        }

        // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —î –∞–≤—Ç–æ–º–æ–±—ñ–ª—å —É —Å–ø–∏—Å–∫—É —É–ª—é–±–ª–µ–Ω–∏—Ö
        const favoriteResponse = await axios.get(
          `${url}/favorites`,
          setHeaders()
        );
        const isFavoriteCar = favoriteResponse.data.some(
          (favorite) => favorite.car._id === id //–Ø–∫—â–æ –∑–Ω–∞–π–¥–µ—Ç—å—Å—è —Ç–∞–∫–∏–π –∞–≤—Ç–æ–º–æ–±—ñ–ª—å, –∑–º—ñ–Ω–Ω–∞ isFavoriteCar –±—É–¥–µ true
        );
        setIsFavorite(isFavoriteCar);

        setLoading(false);
      } catch (err) {
        console.error(
          "Error fetching car details:",
          err.response?.data || err.message
        );
        setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.");
        setLoading(false);
      }
    };

    fetchCarDetails();
  }, [id]);

  const addToFavorites = async () => {
    try {
      await axios.post(
        `${url}/favorites/${id}`, // URL –¥–ª—è –∑–∞–ø–∏—Ç—É
        {}, // –¢—ñ–ª–æ –∑–∞–ø–∏—Ç—É (–º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º)
        setHeaders() // –ü–µ—Ä–µ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω
      );
      setIsFavorite(true); // –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å –Ω–∞ "–£–ª—é–±–ª–µ–Ω–∏–π"
      // –ù–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–¥—ñ—é WebSocket –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö, –±–æ
      // —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ
      // socket.emit("favorite-updated", { carId: id, isFavorite: true });
      alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω—ñ!");

      // console.log("RESPONSE ADD TO FAVORITE", response.data)
    } catch (err) {
      // setIsFavorite("error");
      console.error(err.response?.data || "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
      alert(err.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ.");
    }
  };

  const removeFromFavorites = async () => {
    try {
      await axios.delete(`${url}/favorites/${id}`, setHeaders());
      setIsFavorite(false);
      // –ù–µ –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–¥—ñ—é WebSocket –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö, –±–æ
      // —Ü–µ —Ä–æ–±–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–µ—Ä—ñ
      // socket.emit("favorite-updated", { carId: id, isFavorite: false });
      alert("–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö!");
    } catch (err) {
      console.error(err.response?.data || "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
      alert(err.response?.data?.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö.");
    }
  };

  // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥
  const handleBack = () => {
    navigate(-1);
  };

  if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
  if (error) return <p>{error}</p>;

  return (
    // <div className="car-details">
    <div className={`car-details ${theme}`}>
      <div className="image-container">
        {/* –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –Ω–∞–∑–∞–¥ */}
        <button className="back-button" onClick={handleBack}>
          {/* <FaArrowLeft size={20} /> */}
          <FaArrowLeft />
        </button>
        <img src={car.imageUrl} alt={car.name} className="car-details-image" />
      </div>
      <h1>{car.name}</h1>
      <p>
        <strong>–ë—Ä–µ–Ω–¥:</strong> {car.brand}
      </p>
      <p>
        <strong>–†—ñ–∫:</strong> {car.year}
      </p>
      <p>
        <strong>–û–ø–∏—Å:</strong> {car.description}
      </p>
      {/* <div className="specs-button-wrapper">
      <button
          className={`specs-button ${theme}`}
          onClick={() => navigate(`/car-specs/${car._id}`)}
        >
          –î–µ—â–æ –±—ñ–ª—å—à–µ
        </button>
      </div>  */}
      <div
        className={`specs-button-wrapper ${theme}`}
        onClick={() =>
          // carSpecs ? navigate(`/car-specs/${car._id}`) : setShowModal(true)
          carSpecs ? navigate(`/car-specs/${car._id}`) : navigate(`/add-car-specs/${car._id}`)
        }
      >
        <button className={`specs-button ${theme}`}>
          {carSpecs ? "–î–µ—â–æ –±—ñ–ª—å—à–µ" : "–î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"}
        </button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
      {showModal && (
        <AddCarSpecsModal
          show={showModal}
          onClose={() => setShowModal(false)}
          theme={theme}
          car={car}
        />
      )}

      <button
        onClick={isFavorite ? removeFromFavorites : addToFavorites}
        onMouseEnter={() => setHovering(true)}
        onMouseLeave={() => setHovering(false)}
        className={`favorite-button ${isFavorite ? "added-to-favorites" : ""}`}
      >
        {isFavorite
          ? hovering
            ? "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö"
            : "–£–ª—é–±–ª–µ–Ω–∏–π"
          : "–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ"}
      </button>
    </div>
  );
};

export default CarDetails;

// –¶–µ–π –∫–æ–¥ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ñ AddCarSpecsModal
// <>
//   <div
//     className="modal-overlay"
//     onClick={() => setShowModal(false)}
//   ></div>
//   <div className={`modal-specs ${theme}`}>
//     <h3 className="modal-text">–Ø–∫ –¥–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏?</h3>

//     <input
//       type="text"
//       placeholder="–í–≤–µ–¥—ñ—Ç—å VIN (–Ω–µ–æ–±–æ–≤'—è–∑–∫–æ–≤–æ)"
//       value={vinCode}
//       onChange={(e) => setVinCode(e.target.value)}
//       className={`vin-input ${theme}`}
//     />
//     <button onClick={handleGCSSearch} disabled={loading}>
//       {loading ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..." : "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (GCS)"}
//     </button>
//     <button onClick={handleBingSearch}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (Bing)</button>
//     <button onClick={handleAISearch}>–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ (AI)</button>
//     <button onClick={handleViewOnWikipedia}>
//       –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —É Wikipedia
//     </button>
//     <button onClick={() => navigate(`/add-car-specs/${car._id}`)}>
//       –í—Ä—É—á–Ω—É
//     </button>
//     <button onClick={() => setShowModal(false)}>–ó–∞–∫—Ä–∏—Ç–∏</button>
//   </div>
// </>

// –í—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ñ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç AddCarSpecsModal
//   const handleAutoAddSpecs = async () => {
//   try {
//     const response = await axios.get(
//       `${url}/car-specs/ai-search?make=${car?.brand}&model=${car?.name}&year=${car?.year}&carId=${car?._id}`,
//       setHeaders()
//     );

//     if (response.data) {
//       alert("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ!");
//     } else {
//       alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.");
//     }
//   } catch (error) {
//     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ AI-–ø–æ—à—É–∫—É:", error);
//     alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.");
//   }
// };

// const handleGCSSearch = async () => {
//   // if (!car) return;
//   try {
//     const response = await axios.post(
//       `${url}/car-specs/google-search`,
//       {
//         make: car?.brand,
//         model: car?.name,
//         year: car?.year,
//         carId: car?._id,
//         vin: vinCode || undefined, // ‚úÖ –ü–µ—Ä–µ–¥–∞—î–º–æ VIN-–∫–æ–¥, —è–∫—â–æ –≤—ñ–Ω —î
//       },
//       setHeaders()
//     );
//     console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ GCS:", response.data);
//     alert("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Google Cloud Search!");
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ GCS –ø–æ—à—É–∫—É:", error);
//     alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ Google Cloud Search.");
//   }
// };

// async function handleBingSearch() {
//   const response = await fetch(
//     "http://localhost:5000/api/carspecs/bing-search",
//     {
//       method: "POST",
//       headers: { "Content-Type": "application/json" },
//       body: JSON.stringify({
//         make: "BMW",
//         model: "X6",
//         year: "2024",
//         carId: "ID_–ú–ê–®–ò–ù–ò",
//       }),
//     }
//   );

//   const data = await response.json();
//   console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ Bing:", data);
// }

// const handleAISearch = async () => {
//   try {
//     const response = await axios.post(
//       `${url}/car-specs/ai-search`,
//       {
//         make: car?.brand,
//         model: car?.name,
//         year: car?.year,
//         carId: car?._id,
//       },
//       setHeaders()
//     );
//     console.log(response.data);
//     alert("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI!");
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ AI –ø–æ—à—É–∫—É:", error);
//     alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ AI.");
//   }
// };

// //   // ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ AUTO.RIA
// //   const handleAutoAddSpecs = async () => {
// //   if (!car) return;

// //   try {
// //     const response = await axios.get(
// //       `${url}/car-specs/auto-ria?make=${car.brand}&model=${car.name}&year=${car.year}&carId=${car._id}`,
// //       setHeaders()
// //     );

// //     if (response.data) {
// //       alert("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω–æ —Ç–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!");
// //     } else {
// //       alert("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–∞ AUTO.RIA.");
// //     }
// //   } catch (error) {
// //     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:", error);
// //     alert("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.");
// //   }
// // };

// // const handleAutoAddSpecs = async () => {
// //   try {
// //     const response = await axios.get(
// //       `${url}/car-specs/auto-ria/search?make=${car?.brand}&model=${car?.name}&year=${car?.year}`,
// //       setHeaders()
// //     );

// //     if (response.data) {
// //       alert("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ —É—Å–ø—ñ—à–Ω–æ –æ—Ç—Ä–∏–º–∞–Ω—ñ –∑ AUTO.RIA!");
// //       console.log("AUTO.RIA Specs:", response.data);
// //     } else {
// //       alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ.");
// //     }
// //   } catch (error) {
// //     console.error("–ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞–≤—Ç–æ –Ω–∞ AUTO.RIA:", error);
// //     alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.");
// //   }
// // };

// // ‚úÖ –í—ñ–¥–∫—Ä–∏—Ç—Ç—è Wikipedia –≤ –Ω–æ–≤—ñ–π –≤–∫–ª–∞–¥—Ü—ñ
// const handleViewOnWikipedia = () => {
//   const wikiUrl = `https://en.wikipedia.org/wiki/${car?.brand}_${car?.name}_${car?.year}`;
//   window.open(wikiUrl, "_blank");
// };

// const handleAutoAddSpecs = async () => {
//   try {
//     const response = await axios.get(
//       `${url}/car-specs/scrape?make=${car?.brand}&model=${car?.name}&year=${car?.year}`, setHeaders()
//     );
//     console.log("RESPONSE SPECS : ", response)

//     if (response.data) {
//       await axios.post(`${url}/car-specs`, {
//         carId: car?._id,
//         specifications: response.data,
//       });
//       alert("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω—ñ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ!");
//     } else {
//       alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É.");
//     }
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", error);
//     alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫.");
//   }
//   setShowModal(false);
// };

// const handleAutoAddSpecs = async () => {
// try {
//   const response = await axios.get(
//     `${url}/car-specs/scrape?make=${car?.brand}&model=${car?.name}&year=${car?.year}`,
//     setHeaders()
//   );

//   if (response.data.wikipediaUrl) {
//     window.open(response.data.wikipediaUrl, "_blank"); // –í—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É Wikipedia
//   } else {
//     alert("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Å—Ç–æ—Ä—ñ–Ω–∫—É Wikipedia.");
//   }
// } catch (error) {
//   console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", error);
//   alert("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ Wikipedia.");
// }
// };

// import React, { useEffect, useState } from "react";
// import { useParams } from "react-router-dom";
// import axios from "axios";
// import "./CarDetails.css"; // –°—Ç–∏–ª—ñ –¥–ª—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏
// import { url } from "../slices/api";

// const CarDetails = () => {
//   const { id } = useParams(); // –û—Ç—Ä–∏–º—É—î–º–æ ID –∞–≤—Ç–æ–º–æ–±—ñ–ª—è –∑ URL
//   const [car, setCar] = useState(null);
//   const [loading, setLoading] = useState(true);
//   const [error, setError] = useState("");

//   useEffect(() => {
//     const fetchCarDetails = async () => {
//       try {
//         const response = await axios.get(`${url}/cars/${id}`); // API –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–µ—Ç–∞–ª–µ–π
//         setCar(response.data);
//         setLoading(false);
//       } catch (err) {
//         setError("–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–∞–Ω—ñ –∞–≤—Ç–æ–º–æ–±—ñ–ª—è.");
//         setLoading(false);
//       }
//     };

//     fetchCarDetails();
//   }, [id]);

//   if (loading) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;
//   if (error) return <p>{error}</p>;

//   return (
//     <div className="car-details">
//       <h1>{car.name}</h1>
//       <img src={car.imageUrl} alt={car.name} className="car-details-image" />
//       <p><strong>–ë—Ä–µ–Ω–¥:</strong> {car.brand}</p>
//       <p><strong>–†—ñ–∫:</strong> {car.year}</p>
//       <p><strong>–û–ø–∏—Å:</strong> {car.description}</p>
//       <button onClick={() => alert("–î–æ–¥–∞–Ω–æ –≤ —É–ª—é–±–ª–µ–Ω–µ!")}>–î–æ–¥–∞—Ç–∏ –≤ —É–ª—é–±–ª–µ–Ω–µ</button>
//     </div>
//   );
// };

// export default CarDetails;
