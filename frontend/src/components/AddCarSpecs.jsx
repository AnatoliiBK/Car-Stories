import React, { useState, useRef, useEffect } from "react";
// import React, { useState } from "react";
import axios from "axios";
// import { url } from "../slices/api";
import { url, setHeaders } from "../slices/api";
import { useTheme } from "../components/ThemeContext";
import "./AddCarSpecs.css";
import { useSelector } from "react-redux";
import { useNavigate, useParams } from "react-router-dom";
import AddCarSpecsModal from "./AddCarSpecsModal";

const initialSpecs = {
  vin: "",
  source: "manual",
  fuelType: "",
  combustionEngine: {},
  hybrid: {},
  electric: {},
  nhtsaSpecs: {},
  additionalSpecs: {},
  usefulLinks: [],
};

const AddCarSpecs = ({ onSuccess, bypassPermissions = false }) => {
  const [car, setCar] = useState(null);
  const [specs, setSpecs] = useState(initialSpecs);
  const [message, setMessage] = useState("");
  const { theme } = useTheme();
  const userId = useSelector((state) => state.auth._id);
  const { carId } = useParams();
  const navigate = useNavigate();

  const [ownerId, setOwnerId] = useState(null);
  const isAdmin = useSelector((state) => state.auth.isAdmin); // –¥–æ–¥–∞–π –≤ auth slice
  const [permissionRequested, setPermissionRequested] = useState(false);
  const [showModal, setShowModal] = useState(false); // –°—Ç–µ–π—Ç –¥–ª—è –ø–æ–∫–∞–∑—É –º–æ–¥–∞–ª–∫–∏
  // const canEdit = userId === ownerId || isAdmin;
  const canEdit = bypassPermissions || userId === ownerId || isAdmin;

  console.log("car id in AddCarSpecs", carId);
  console.log("user id in AddCarSpecs", userId);

  const [newSpecKey, setNewSpecKey] = useState("");
  const [newSpecValue, setNewSpecValue] = useState("");
  const [newLink, setNewLink] = useState("");

  const [fieldErrors, setFieldErrors] = useState({});
  const messageRef = useRef(null);

  // –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ
  useEffect(() => {
    const fetchCarOwner = async () => {
      try {
        const res = await axios.get(`${url}/cars/${carId}`);
        setOwnerId(res.data.createdBy);
        setCar(res.data);
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ:", err);
      }
    };
    fetchCarOwner();
  }, [carId]);

  useEffect(() => {
    if (messageRef.current) {
      messageRef.current.scrollIntoView({
        behavior: "smooth",
        block: "center",
      });
    }
  }, [message]);

  const handleChange = (section, field, value) => {
    setSpecs((prev) => ({
      ...prev,
      [section]: {
        ...prev[section],
        [field]: value,
      },
    }));
  };

  const handleFieldChange = (section) => (e) => {
    const { name, value, type } = e.target;
    handleChange(section, name, type === "number" ? +value : value);
  };

  const handleAddSpec = () => {
    const trimmedKey = newSpecKey.trim();
    const trimmedValue = newSpecValue.trim();
    if (!trimmedKey || !trimmedValue) return;
    if (specs.additionalSpecs.hasOwnProperty(trimmedKey)) {
      setMessage("‚ö†Ô∏è –¢–∞–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –≤–∂–µ —ñ—Å–Ω—É—î");
      return;
    }
    setSpecs((prev) => ({
      ...prev,
      additionalSpecs: {
        ...prev.additionalSpecs,
        [trimmedKey]: trimmedValue,
      },
    }));
    setNewSpecKey("");
    setNewSpecValue("");
  };

  const handleRemoveSpec = (key) => {
    setSpecs((prev) => {
      const updated = { ...prev.additionalSpecs };
      delete updated[key];
      return { ...prev, additionalSpecs: updated };
    });
  };

  const handleAddLink = () => {
    const trimmedLink = newLink.trim();
    if (!trimmedLink) return;
    if (!/^https?:\/\/.+/i.test(trimmedLink)) {
      setMessage("‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è (–ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ http/https)");
      return;
    }
    if (specs.usefulLinks.includes(trimmedLink)) {
      setMessage("‚ö†Ô∏è –¶–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –≤–∂–µ –¥–æ–¥–∞–Ω–æ");
      return;
    }
    setSpecs((prev) => ({
      ...prev,
      usefulLinks: [...prev.usefulLinks, trimmedLink],
    }));
    setNewLink("");
  };

  const handleRemoveLink = (linkToRemove) => {
    setSpecs((prev) => ({
      ...prev,
      usefulLinks: prev.usefulLinks.filter((link) => link !== linkToRemove),
    }));
  };

  // const handleSubmit = async (e) => {
  //   e.preventDefault();
  //   try {
  //     const response = await axios.post(`${url}/car-specs`, {
  //       carId,
  //       createdBy: userId,
  //       ...specs,
  //     }, setHeaders());
  //     setMessage("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ");
  //     if (onSuccess) onSuccess(response.data);
  //     setSpecs(initialSpecs);
  //   } catch (error) {
  //     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
  //     setMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏");
  //   }
  // };

  const validateSpecs = (data) => {
    const errors = {};
    if (data.vin && data.vin.trim().length > 0 && data.vin.trim().length < 17)
      errors.vin = "VIN –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ —â–æ–Ω–∞–π–º–µ–Ω—à–µ 17 —Å–∏–º–≤–æ–ª—ñ–≤.";
    return errors;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const errors = validateSpecs(specs);
    if (Object.keys(errors).length > 0) {
      setFieldErrors(errors);
      setMessage("‚ùå –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ VIN.");
      return;
    }

    if (!carId || !userId) {
      console.error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π carId –∞–±–æ userId:", { carId, userId });
      setMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏: –≤—ñ–¥—Å—É—Ç–Ω—ñ–π carId –∞–±–æ userId");
      return;
    }

    const payload = {
      carId,
      createdBy: userId,
      ...specs,
    };

    if (!payload.vin || payload.vin.length < 17) {
      delete payload.vin;
    }

    try {
      const response = await axios.post(
        `${url}/car-specs`,
        payload,
        setHeaders()
      );
      setMessage("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ");
      if (onSuccess) onSuccess(response.data);
      setSpecs(initialSpecs);
      setFieldErrors({});
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", error);
      setMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏");
    }
  };

  return (
    <div className={`add-specs-container ${theme}`}>
      <h2>–î–æ–¥–∞—Ç–∏ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h2>
      <p>{car?.brand} {car?.name} ({car?.year})</p>
      {/* {message && <p className="status-message">{message}</p>} */}

      <form className={`specs-form ${theme}`} onSubmit={handleSubmit}>
        {/* {userId !== ownerId && !isAdmin ? ( */}
        {!canEdit ? (
          <>
            <p className="warning">
              ‚ùóÔ∏è–õ–∏—à–µ –≤–ª–∞—Å–Ω–∏–∫ –∞–≤—Ç–æ –∞–±–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ –¥–æ–¥–∞–≤–∞—Ç–∏
              —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.
            </p>
            {!permissionRequested ? (
              <button
                type="button"
                onClick={async () => {
                  try {
                    await axios.post(
                      `${url}/car-specs/permission-request`,
                      {
                        carId,
                        // requesterId: userId,
                      },
                      setHeaders()
                    );
                    setMessage("üì© –ó–∞–ø–∏—Ç –Ω–∞ –¥–æ–∑–≤—ñ–ª –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤–ª–∞—Å–Ω–∏–∫—É.");
                    setPermissionRequested(true);
                  } catch (err) {
                    console.error(err);
                    setMessage("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç.");
                  }
                }}
              >
                –ù–∞–¥—ñ—Å–ª–∞—Ç–∏ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–∑–≤—ñ–ª
              </button>
            ) : (
              <p className="info">üì® –ó–∞–ø–∏—Ç –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ.</p>
            )}
            <button className="back-button" onClick={() => navigate(-1)}>
              ‚Üê –ù–∞–∑–∞–¥
            </button>
          </>
        ) : // <button type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</button>
        null}

        {canEdit ? (
          <>
            <div
              className={`specs-button-wrapper ${theme}`}
              // onClick={() =>
              //   !canEdit ? navigate(`/car-specs/${carId}`) : setShowModal(true)
              // }
              onClick={() => setShowModal(true)}
            >
              <button type="button" className={`specs-button ${theme}`}>
                –°–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–±—Ä–∞–Ω–∏–º —Ä–µ—Å—É—Ä—Å–æ–º
              </button>
            </div>
            {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ */}
            {showModal && (
              <AddCarSpecsModal
                show={showModal}
                onClose={() => setShowModal(false)}
                theme={theme}
                car={car}
              />
            )}
            <label>
              VIN:
              <input
                value={specs.vin}
                onChange={(e) => setSpecs({ ...specs, vin: e.target.value })}
                maxLength={17}
                className={fieldErrors.vin ? "input-error" : ""}
              />
            </label>

            <label>
              –î–∂–µ—Ä–µ–ª–æ:
              <select
                value={specs.source}
                onChange={(e) => setSpecs({ ...specs, source: e.target.value })}
              >
                <option value="manual">manual</option>
                <option value="auto-ria">auto-ria</option>
                <option value="AI">AI</option>
                <option value="bing">bing</option>
                <option value="msn">msn</option>
                <option value="gcs">gcs</option>
                <option value="algolia">algolia</option>
                <option value="nhtsa">nhtsa</option>
              </select>
            </label>

            <label>
              –¢–∏–ø –¥–≤–∏–≥—É–Ω–∞:
              <select
                value={specs.fuelType}
                onChange={(e) =>
                  setSpecs({ ...specs, fuelType: e.target.value })
                }
              >
                <option value="">–û–±–µ—Ä—ñ—Ç—å...</option>
                <option value="–±–µ–Ω–∑–∏–Ω">–ë–µ–Ω–∑–∏–Ω</option>
                <option value="–¥–∏–∑–µ–ª—å">–î–∏–∑–µ–ª—å</option>
                <option value="–≥—ñ–±—Ä–∏–¥">–ì—ñ–±—Ä–∏–¥</option>
                <option value="–µ–ª–µ–∫—Ç—Ä–æ">–ï–ª–µ–∫—Ç—Ä–æ</option>
              </select>
            </label>

            {specs.fuelType === "–±–µ–Ω–∑–∏–Ω" || specs.fuelType === "–¥–∏–∑–µ–ª—å" ? (
              <>
                <h4>–î–≤–∏–≥—É–Ω</h4>
                <label>–û–± º—î–º (–ª):</label>
                <input
                  type="number"
                  name="engineDisplacement"
                  onChange={handleFieldChange("combustionEngine")}
                />
                <label>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–∫.—Å.):</label>
                <input
                  type="number"
                  name="horsepower"
                  onChange={handleFieldChange("combustionEngine")}
                />
                <label>–ö—Ä—É—Ç–Ω–∏–π –º–æ–º–µ–Ω—Ç (–ù–º):</label>
                <input
                  type="number"
                  name="torque"
                  onChange={handleFieldChange("combustionEngine")}
                />

                <label>–í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ (–ª/100 –∫–º):</label>
                <input
                  type="number"
                  name="fuelConsumption"
                  onChange={handleFieldChange("combustionEngine")}
                />

                <label>–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á:</label>
                <input
                  type="text"
                  name="transmission"
                  onChange={handleFieldChange("combustionEngine")}
                />
              </>
            ) : specs.fuelType === "–≥—ñ–±—Ä–∏–¥" ? (
              <>
                <h4>–ì—ñ–±—Ä–∏–¥–Ω–∏–π –¥–≤–∏–≥—É–Ω</h4>
                <label>–¢–∏–ø:</label>
                <input
                  type="text"
                  name="type"
                  onChange={handleFieldChange("hybrid")}
                />

                <label>–û–±'—î–º –¥–≤–∏–≥—É–Ω–∞ (–ª):</label>
                <input
                  type="number"
                  name="engineDisplacement"
                  onChange={handleFieldChange("hybrid")}
                />

                <label>–í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ (–ª/100 –∫–º):</label>
                <input
                  type="number"
                  name="fuelConsumption"
                  onChange={handleFieldChange("hybrid")}
                />

                <label>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä–∞ (–∫–í—Ç):</label>
                <input
                  type="number"
                  name="electricMotorPower"
                  onChange={handleFieldChange("hybrid")}
                />

                <label>–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–∫.—Å.):</label>
                <input
                  type="number"
                  name="totalHorsepower"
                  onChange={handleFieldChange("hybrid")}
                />

                <label>–ó–∞–ø–∞—Å —Ö–æ–¥—É –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ (–∫–º):</label>
                <input
                  type="number"
                  name="electricRange"
                  onChange={handleFieldChange("hybrid")}
                />
              </>
            ) : specs.fuelType === "–µ–ª–µ–∫—Ç—Ä–æ" ? (
              <>
                <h4>–ï–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥—É–Ω</h4>

                <label>–Ñ–º–Ω—ñ—Å—Ç—å –±–∞—Ç–∞—Ä–µ—ó (–∫–í—Ç‚ãÖ–≥–æ–¥):</label>
                <input
                  type="number"
                  name="batteryCapacity"
                  onChange={handleFieldChange("electric")}
                />

                <label>–ó–∞–ø–∞—Å —Ö–æ–¥—É (–∫–º):</label>
                <input
                  type="number"
                  name="range"
                  onChange={handleFieldChange("electric")}
                />

                <label>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ—Ç—è–≥–∏ (–∫–í—Ç):</label>
                <input
                  type="number"
                  name="electricMotorPower"
                  onChange={handleFieldChange("electric")}
                />

                <label>–ß–∞—Å –∑–∞—Ä—è–¥–∫–∏:</label>
                <input
                  type="text"
                  name="chargeTime"
                  onChange={handleFieldChange("electric")}
                />

                <label>–¢–∏–ø –∑–∞—Ä—è–¥–Ω–æ–≥–æ —Ä–æ–∑'—î–º—É:</label>
                <input
                  type="text"
                  name="chargePort"
                  onChange={handleFieldChange("electric")}
                />
              </>
            ) : null}

            {/* üîß –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø–æ—Å–∏–ª–∞–Ω–Ω—è —Ç–æ—â–æ */}
            <div className="additional-specs-section">
              <h4>üîß –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏</h4>
              <div className="add-spec-row">
                <input
                  type="text"
                  placeholder="–ù–∞–∑–≤–∞"
                  value={newSpecKey}
                  onChange={(e) => setNewSpecKey(e.target.value)}
                />
                <input
                  type="text"
                  placeholder="–ó–Ω–∞—á–µ–Ω–Ω—è"
                  value={newSpecValue}
                  onChange={(e) => setNewSpecValue(e.target.value)}
                />
                <button
                  type="button"
                  className="add-button"
                  onClick={handleAddSpec}
                >
                  ‚ûï
                </button>
              </div>
              <ul className="animated-list">
                {Object.entries(specs.additionalSpecs).map(([key, value]) => (
                  <li key={key} className="fade-in">
                    <strong>{key}:</strong> {value}
                    <button
                      type="button"
                      className="remove-button"
                      onClick={() => handleRemoveSpec(key)}
                    >
                      ‚ùå
                    </button>
                  </li>
                ))}
              </ul>
            </div>

            <div className="useful-links-section">
              <h4>üîó –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è</h4>
              <div className="add-link-row">
                <input
                  type="text"
                  placeholder="https://..."
                  value={newLink}
                  onChange={(e) => setNewLink(e.target.value)}
                />
                <button
                  type="button"
                  className="add-button"
                  onClick={handleAddLink}
                >
                  ‚ûï
                </button>
              </div>
              <ul className="animated-list">
                {specs.usefulLinks.map((link) => (
                  <li key={link} className="fade-in">
                    <a href={link} target="_blank" rel="noopener noreferrer">
                      {link}
                    </a>
                    <button
                      type="button"
                      className="remove-button"
                      onClick={() => handleRemoveLink(link)}
                    >
                      ‚ùå
                    </button>
                  </li>
                ))}
              </ul>
            </div>
            {/* {message && <p className="status-message">{message}</p>} */}
            {message && (
              <div className="message fade-in" ref={messageRef}>
                {message}
              </div>
            )}

            <div className="buttons">
              <button className="back-button" onClick={() => navigate(-1)}>
                ‚Üê –ù–∞–∑–∞–¥
              </button>
              {/* <button className="save-button" onClick={handleSubmit}>
          üíæ –ó–±–µ—Ä–µ–≥—Ç–∏
        </button> */}
            </div>

            <button type="submit" className="submit-button">
              üíæ –ó–±–µ—Ä–µ–≥—Ç–∏
            </button>
          </>
        ) : null}
      </form>
    </div>
  );
};

export default AddCarSpecs;

// import React, { useState } from "react";
// import { useParams, useNavigate } from "react-router-dom";
// import axios from "axios";
// import { url } from "../slices/api";
// import "./AddCarSpecs.css"
// import { useTheme } from "../components/ThemeContext";

// const AddCarSpecs = () => {
//   const { carId } = useParams();
//   const navigate = useNavigate();
//   const [fuelType, setFuelType] = useState("–±–µ–Ω–∑–∏–Ω");
//   const [specs, setSpecs] = useState({});
//   const { theme } = useTheme();

//   const handleChange = (e) => {
//     setSpecs({ ...specs, [e.target.name]: e.target.value });
//   };

//   const handleSubmit = async (e) => {
//     e.preventDefault();
//     try {
//       await axios.post(`${url}/car-specs`, { carId, fuelType, ...specs });
//       navigate(`/cars/${carId}`); // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∞–≤—Ç–æ
//     } catch (error) {
//       console.error("–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:", error);
//     }
//   };

//   return (
//     <div className="add-specs-container">
//       <h2>–î–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ</h2>
//       <form className={`specs-form ${theme}`} onSubmit={handleSubmit}>
//         <label>–¢–∏–ø –¥–≤–∏–≥—É–Ω–∞:</label>
//         <select value={fuelType} onChange={(e) => setFuelType(e.target.value)}>
//           <option value="–±–µ–Ω–∑–∏–Ω">–ë–µ–Ω–∑–∏–Ω</option>
//           <option value="–¥–∏–∑–µ–ª—å">–î–∏–∑–µ–ª—å</option>
//           <option value="–≥—ñ–±—Ä–∏–¥">–ì—ñ–±—Ä–∏–¥</option>
//           <option value="–µ–ª–µ–∫—Ç—Ä–æ">–ï–ª–µ–∫—Ç—Ä–æ</option>
//         </select>

//         {fuelType === "–±–µ–Ω–∑–∏–Ω" || fuelType === "–¥–∏–∑–µ–ª—å" ? (
//           <>
//             <label>–û–±'—î–º –¥–≤–∏–≥—É–Ω–∞ (–ª):</label>
//             <input type="number" name="engineDisplacement"  step="0.01" onChange={handleChange} />

//             <label>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–∫.—Å.):</label>
//             <input type="number" name="horsepower" onChange={handleChange} />

//             <label>–ö—Ä—É—Ç–Ω–∏–π –º–æ–º–µ–Ω—Ç (–ù–º):</label>
//             <input type="number" name="torque" onChange={handleChange} />

//             <label>–í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ (–ª/100 –∫–º):</label>
//             <input type="number" name="fuelConsumption" onChange={handleChange} />

//             <label>–ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á:</label>
//             <input type="text" name="transmission" onChange={handleChange} />
//           </>
//         ) : fuelType === "–≥—ñ–±—Ä–∏–¥" ? (
//           <>
//             <label>–¢–∏–ø –≥—ñ–±—Ä–∏–¥–∞:</label>
//             <input type="text" name="hybridType" onChange={handleChange} />

//             <label>–û–±'—î–º –¥–≤–∏–≥—É–Ω–∞ (–ª):</label>
//             <input type="number" name="engineDisplacement" onChange={handleChange} />

//             <label>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä–∞ (–∫–í—Ç):</label>
//             <input type="number" name="electricMotorPower" onChange={handleChange} />

//             <label>–ó–∞–≥–∞–ª—å–Ω–∞ –ø–æ—Ç—É–∂–Ω—ñ—Å—Ç—å (–∫.—Å.):</label>
//             <input type="number" name="totalHorsepower" onChange={handleChange} />

//             <label>–ó–∞–ø–∞—Å —Ö–æ–¥—É –Ω–∞ –µ–ª–µ–∫—Ç—Ä–æ (–∫–º):</label>
//             <input type="number" name="electricRange" onChange={handleChange} />
//           </>
//         ) : (
//           <>
//             <label>–Ñ–º–Ω—ñ—Å—Ç—å –±–∞—Ç–∞—Ä–µ—ó (–∫–í—Ç‚ãÖ–≥–æ–¥):</label>
//             <input type="number" name="batteryCapacity" onChange={handleChange} />

//             <label>–ó–∞–ø–∞—Å —Ö–æ–¥—É (–∫–º):</label>
//             <input type="number" name="range" onChange={handleChange} />

//             <label>–ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å –µ–ª–µ–∫—Ç—Ä–æ–º–æ—Ç–æ—Ä–∞ (–∫–í—Ç):</label>
//             <input type="number" name="electricMotorPower" onChange={handleChange} />

//             <label>–ß–∞—Å –∑–∞—Ä—è–¥–∫–∏:</label>
//             <input type="text" name="chargeTime" onChange={handleChange} />

//             <label>–¢–∏–ø –∑–∞—Ä—è–¥–Ω–æ–≥–æ —Ä–æ–∑'—î–º—É:</label>
//             <input type="text" name="chargePort" onChange={handleChange} />
//           </>
//         )}

//         <button className="add-specs-button" type="submit">–ó–±–µ—Ä–µ–≥—Ç–∏</button>
//       </form>
//     </div>
//   );
// };

// export default AddCarSpecs;
