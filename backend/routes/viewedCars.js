const express = require("express");
const router = express.Router();
const ViewedCar = require("../models/ViewedCar");
const { auth } = require("../middleware/auth");

// ‚û§ –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
router.post("/", auth, async (req, res) => {
  try {
    const { carId } = req.body;
    const userId = req.user._id; // –ë–µ—Ä–µ–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–æ–∫–µ–Ω–∞

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∞–≤—Ç–æ –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
    const existingViewedCar = await ViewedCar.findOne({ userId, carId });
    if (existingViewedCar) {
      return res.status(200).json({ message: "–ê–≤—Ç–æ–º–æ–±—ñ–ª—å –≤–∂–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–æ" });
    }

    // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
    const viewedCar = new ViewedCar({ userId, carId });
    await viewedCar.save();

    // üîπ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–¥—ñ—é WebSocket
    if (req.app.locals.io) {
      req.app.locals.io.emit("viewed-updated", { carId, isViewed: true });
    }

    res.status(201).json(viewedCar);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚û§ –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –∞–≤—Ç–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
router.get("/", auth, async (req, res) => {
  try {
    const userId = req.user._id;
    // const viewedCars = await ViewedCar.find({ userId }).populate("carId");

    const viewedCars = await ViewedCar.find({ userId })
      .populate({
        path: "carId",
        populate: {
          path: "createdBy", // –û—Ç—Ä–∏–º—É—î–º–æ –≤–ª–∞—Å–Ω–∏–∫–∞ –∞–≤—Ç–æ
          select: "name avatar", // –ë–µ—Ä–µ–º–æ —Ç—ñ–ª—å–∫–∏ —ñ–º'—è —Ç–∞ –∞–≤–∞—Ç–∞—Ä
        },
      })
      .populate("userId", "name avatar"); // –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á, —â–æ –ø–µ—Ä–µ–≥–ª—è–Ω—É–≤
    res.status(200).json(viewedCars);
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚û§ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
router.delete("/:carId", auth, async (req, res) => {
  try {
    const userId = req.user._id;
    const { carId } = req.params;

    const viewedCar = await ViewedCar.findOneAndDelete({ userId, carId });

    if (!viewedCar) {
      return res
        .status(404)
        .json({ message: "–ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö" });
    }

    // üîπ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–¥—ñ—é WebSocket
    if (req.app.locals.io) {
      req.app.locals.io.emit("viewed-updated", { carId, isViewed: false });
    }

    res.status(200).json({ message: "–ê–≤—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö", carId });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚û§ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–≤—Ç–æ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –¥–ª—è –≤—Å—ñ—Ö, —è–∫—â–æ –≤–æ–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–µ –∑ –∫–∞—Ç–∞–ª–æ–≥—É
router.delete("/car-deleted/:carId", auth, async (req, res) => {
  try {
    const { carId } = req.params;

    const deletedCars = await ViewedCar.deleteMany({ carId });

    if (deletedCars.deletedCount === 0) {
      return res
        .status(404)
        .json({ message: "–ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö" });
    }

    // üîπ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–¥—ñ—é WebSocket
    if (req.app.locals.io) {
      req.app.locals.io.emit("car-deleted", carId);
    }

    res.status(200).json({ message: "–ê–≤—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö –¥–ª—è –≤—Å—ñ—Ö" });
  } catch (error) {
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

module.exports = router;

// // ‚û§ –î–æ–¥–∞—Ç–∏ –∞–≤—Ç–æ –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å)
// router.post("/", auth, async (req, res) => {
//   try {
//     const { carId } = req.body;
//     const userId = req.user._id;

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∂–µ —î –∞–≤—Ç–æ —É —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö
//     const existingViewedCar = await ViewedCar.findOne({ userId, carId });

//     if (existingViewedCar) {
//       return res
//         .status(200)
//         .json({ message: "–ê–≤—Ç–æ –≤–∂–µ —É —Å–ø–∏—Å–∫—É –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏—Ö" });
//     }

//     // –î–æ–¥–∞—î–º–æ –∞–≤—Ç–æ –≤ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ
//     const newViewedCar = new ViewedCar({ userId, carId });
//     await newViewedCar.save();

//     res.status(201).json(newViewedCar);
//   } catch (error) {
//     res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// });
