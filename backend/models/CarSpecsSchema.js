const mongoose = require("mongoose");

const CarSpecsSchema = new mongoose.Schema(
  {
    // carId: {
    //   type: String, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ä—è–¥–æ–∫, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –æ–±–º–µ–∂–µ–Ω—å ObjectId
    //   required: true,
    //   unique: true, // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ—Å—Ç—å carId –¥–ª—è –∫–æ–∂–Ω–æ—ó –º–∞—à–∏–Ω–∏
    // },
    carId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "Car",
      required: true,
      unique: true,
    },

    createdBy: {
      type: mongoose.Schema.Types.ObjectId,
      ref: "User",
      required: true,
    },

    vin: {
      type: String,
      trim: true,
      uppercase: true,
      minlength: 17,
      maxlength: 17,
      // unique: true,
    },

    // –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö (–¥–æ–¥–∞–ª–∏ nhtsa)
    source: {
      type: String,
      enum: [
        "manual",
        "auto-ria",
        "AI",
        "bing",
        "msn",
        "gcs",
        "algolia",
        "nhtsa",
      ],
      required: true,
    },

    // –¢–∏–ø –ø–∞–ª–∏–≤–∞
    fuelType: {
      type: String,
      enum: ["–±–µ–Ω–∑–∏–Ω", "–¥–∏–∑–µ–ª—å", "–≥—ñ–±—Ä–∏–¥", "–µ–ª–µ–∫—Ç—Ä–æ"],
    },

    // –î–≤–∏–≥—É–Ω –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∑–≥–æ—Ä—è–Ω–Ω—è
    combustionEngine: {
      engineDisplacement: Number,
      horsepower: Number,
      torque: Number,
      fuelConsumption: Number,
      transmission: String,
    },

    // –ì—ñ–±—Ä–∏–¥–Ω–∏–π –¥–≤–∏–≥—É–Ω
    hybrid: {
      hybridType: String,
      engineDisplacement: Number,
      electricMotorPower: Number,
      totalHorsepower: Number,
      electricRange: Number,
    },

    // –ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∏–π –¥–≤–∏–≥—É–Ω
    electric: {
      batteryCapacity: Number,
      range: Number,
      electricMotorPower: Number,
      chargeTime: String,
      chargePort: String,
    },

    // ‚úÖ –ù–æ–≤–∏–π –±–ª–æ–∫ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ NHTSA
    nhtsaSpecs: {
      make: String,
      model: String,
      makeId: Number,
      modelId: Number,
      year: Number,
      vehicleType: String, // –¢–∏–ø –∞–≤—Ç–æ (–ª–µ–≥–∫–æ–≤–µ, –≤–∞–Ω—Ç–∞–∂–Ω–µ —Ç–æ—â–æ)
      plantCountry: String, // –ö—Ä–∞—ó–Ω–∞ –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–∞
      plantCompany: String, // –ó–∞–≤–æ–¥-–≤–∏—Ä–æ–±–Ω–∏–∫
      bodyClass: String, // –¢–∏–ø –∫—É–∑–æ–≤–∞
    },

    // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –æ—Ç—Ä–∏–º–∞–Ω–∞ —á–µ—Ä–µ–∑ Bing, GCS —Ç–æ—â–æ)
    additionalSpecs: {
      type: Map,
      of: mongoose.Schema.Types.Mixed,
      default: {},
    },

    // –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
    usefulLinks: [
      {
        title: String,
        url: String,
      },
    ],
  },
  { timestamps: true }
);

module.exports = mongoose.model("CarSpecs", CarSpecsSchema);

// const mongoose = require("mongoose");

// const CarSpecsSchema = new mongoose.Schema(
//   {
//     carId: {
//       type: mongoose.Schema.Types.ObjectId,
//       ref: "Car",
//       required: true,
//       unique: true,
//     },

//     createdBy: {
//       type: mongoose.Schema.Types.ObjectId,
//       ref: "User",
//       required: true,
//     },

//     brand: {
//       type: String,
//       trim: true,
//     },
//     model: {
//       type: String,
//       trim: true,
//     },

//     year: {
//       type: Number,
//     },

//     vin: {
//       type: String,
//       trim: true,
//       uppercase: true,
//       minlength: 17,
//       maxlength: 17,
//       unique: true,
//     },

//     source: {
//       type: String,
//       enum: [
//         "manual",
//         "auto-ria",
//         "AI",
//         "bing",
//         "msn",
//         "gcs",
//         "algolia",
//         "nhtsa",
//       ],
//       required: true,
//     },

//     fuelType: {
//       type: String,
//       enum: ["–±–µ–Ω–∑–∏–Ω", "–¥–∏–∑–µ–ª—å", "–≥—ñ–±—Ä–∏–¥", "–µ–ª–µ–∫—Ç—Ä–æ"],
//     },

//     combustionEngine: {
//       engineDisplacement: Number,
//       horsepower: Number,
//       torque: Number,
//       fuelConsumption: Number,
//       transmission: String,
//     },

//     hybrid: {
//       hybridType: String,
//       engineDisplacement: Number,
//       electricMotorPower: Number,
//       totalHorsepower: Number,
//       electricRange: Number,
//     },

//     electric: {
//       batteryCapacity: Number,
//       range: Number,
//       electricMotorPower: Number,
//       chargeTime: String,
//       chargePort: String,
//     },

//     nhtsaSpecs: {
//       make: String,
//       model: String,
//       makeId: Number,
//       modelId: Number,
//       year: Number,
//       vehicleType: String,
//       plantCountry: String,
//       plantCompany: String,
//       bodyClass: String,
//     },

//     additionalSpecs: {
//       type: Map,
//       of: mongoose.Schema.Types.Mixed,
//       default: {},
//     },

//     usefulLinks: [
//       {
//         title: {
//           type: String,
//           trim: true,
//         },
//         url: {
//           type: String,
//           trim: true,
//         },
//       },
//     ],
//   },
//   { timestamps: true }
// );

// // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –ø—ñ–¥—Ç—è–≥—É–≤–∞–Ω–Ω—è createdBy (—Ç—ñ–ª—å–∫–∏ —ñ–º'—è —ñ email)
// CarSpecsSchema.pre(/^find/, function (next) {
//   this.populate({
//     path: "createdBy",
//     select: "name email",
//   });
//   next();
// });

// module.exports = mongoose.model("CarSpecs", CarSpecsSchema);

// üîµ üî•

// const mongoose = require("mongoose");

// const CarSpecsSchema = new mongoose.Schema(
//   {
//     carId: {
//       type: mongoose.Schema.Types.ObjectId,
//       ref: "Car",
//       required: true,
//     },

//     // –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö (manual - –≤—Ä—É—á–Ω—É, auto-ria - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ, AI - OpenAI, bing - –ø–æ—à—É–∫ Bing, gcs - Google Cloud Search)
//     source: {
//       type: String,
//       enum: ["manual", "auto-ria", "AI", "bing", "gcs", "algolia"],
//       required: true,
//     },

//     // –¢–∏–ø –ø–∞–ª–∏–≤–∞
//     fuelType: {
//       type: String,
//       enum: ["–±–µ–Ω–∑–∏–Ω", "–¥–∏–∑–µ–ª—å", "–≥—ñ–±—Ä–∏–¥", "–µ–ª–µ–∫—Ç—Ä–æ"],
//     },

//     // –î–≤–∏–≥—É–Ω –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∑–≥–æ—Ä—è–Ω–Ω—è
//     combustionEngine: {
//       engineDisplacement: Number,
//       horsepower: Number,
//       torque: Number,
//       fuelConsumption: Number,
//       transmission: String,
//     },

//     // –ì—ñ–±—Ä–∏–¥–Ω–∏–π –¥–≤–∏–≥—É–Ω
//     hybrid: {
//       hybridType: String,
//       engineDisplacement: Number,
//       electricMotorPower: Number,
//       totalHorsepower: Number,
//       electricRange: Number,
//     },

//     // –ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∏–π –¥–≤–∏–≥—É–Ω
//     electric: {
//       batteryCapacity: Number,
//       range: Number,
//       electricMotorPower: Number,
//       chargeTime: String,
//       chargePort: String,
//     },

//     // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è, –æ—Ç—Ä–∏–º–∞–Ω–∞ —á–µ—Ä–µ–∑ Bing, Google Cloud Search, –∞–±–æ —ñ–Ω—à—ñ –¥–∂–µ—Ä–µ–ª–∞)
//     additionalSpecs: {
//       type: Map,
//       of: mongoose.Schema.Types.Mixed,
//       default: {},
//     },

//     // –ü–æ—Å–∏–ª–∞–Ω–Ω—è –∑ Bing, Google Cloud Search
//     usefulLinks: [
//       {
//         title: String,
//         url: String,
//       },
//     ],

//     // –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
//     createdAt: {
//       type: Date,
//       default: Date.now,
//     },
//   },
//   { timestamps: true }
// );

// module.exports = mongoose.model("CarSpecs", CarSpecsSchema);

// const mongoose = require("mongoose");

// const CarSpecsSchema = new mongoose.Schema(
//   {
//     carId: {
//       type: mongoose.Schema.Types.ObjectId,
//       ref: "Car",
//       required: true,
//     },

//     // –î–∂–µ—Ä–µ–ª–æ –¥–∞–Ω–∏—Ö (manual - –≤—Ä—É—á–Ω—É, auto-ria - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)
//     source: {
//       type: String,
//       enum: ["manual", "auto-ria", "AI"],
//       required: true,
//     },

//     // –¢–∏–ø –ø–∞–ª–∏–≤–∞
//     fuelType: {
//       type: String,
//       enum: ["–±–µ–Ω–∑–∏–Ω", "–¥–∏–∑–µ–ª—å", "–≥—ñ–±—Ä–∏–¥", "–µ–ª–µ–∫—Ç—Ä–æ"],
//       required: true,
//     },

//     // –î–≤–∏–≥—É–Ω –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ–≥–æ –∑–≥–æ—Ä—è–Ω–Ω—è (–¥–ª—è –±–µ–Ω–∑–∏–Ω–æ–≤–∏—Ö —ñ –¥–∏–∑–µ–ª—å–Ω–∏—Ö –∞–≤—Ç–æ)
//     combustionEngine: {
//       engineDisplacement: {
//         type: Number,
//         required: function () {
//           return this.fuelType === "–±–µ–Ω–∑–∏–Ω" || this.fuelType === "–¥–∏–∑–µ–ª—å";
//         },
//       },
//       horsepower: {
//         type: Number,
//         required: function () {
//           return this.fuelType === "–±–µ–Ω–∑–∏–Ω" || this.fuelType === "–¥–∏–∑–µ–ª—å";
//         },
//       },
//       torque: Number,
//       fuelConsumption: Number,
//       transmission: String,
//     },

//     // –ì—ñ–±—Ä–∏–¥–Ω–∏–π –¥–≤–∏–≥—É–Ω (–¥–ª—è –≥—ñ–±—Ä–∏–¥–Ω–∏—Ö –∞–≤—Ç–æ)
//     hybrid: {
//       hybridType: {
//         type: String,
//         required: function () {
//           return this.fuelType === "–≥—ñ–±—Ä–∏–¥";
//         },
//       },
//       engineDisplacement: {
//         type: Number,
//         required: function () {
//           return this.fuelType === "–≥—ñ–±—Ä–∏–¥";
//         },
//       },
//       electricMotorPower: Number,
//       totalHorsepower: Number,
//       electricRange: Number,
//     },

//     // –ï–ª–µ–∫—Ç—Ä–∏—á–Ω–∏–π –¥–≤–∏–≥—É–Ω (–¥–ª—è –µ–ª–µ–∫—Ç—Ä–æ–º–æ–±—ñ–ª—ñ–≤)
//     electric: {
//       batteryCapacity: {
//         type: Number,
//         required: function () {
//           return this.fuelType === "–µ–ª–µ–∫—Ç—Ä–æ";
//         },
//       },
//       range: Number,
//       electricMotorPower: Number,
//       chargeTime: String,
//       chargePort: String,
//     },

//     // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø–∞—Ä–∞–º–µ—Ç—Ä–∏, —è–∫–∏—Ö –Ω–µ–º–∞—î –≤ —Å—Ö–µ–º—ñ)
//     additionalSpecs: {
//       type: Map,
//       of: mongoose.Schema.Types.Mixed,
//       default: {},
//     },

//     // –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–∞–ø–∏—Å—É
//     createdAt: {
//       type: Date,
//       default: Date.now,
//     },
//   },
//   { timestamps: true }
// );

// module.exports = mongoose.model("CarSpecs", CarSpecsSchema);

// const mongoose = require("mongoose");

// const CarSpecsSchema = new mongoose.Schema({
//   carId: { type: mongoose.Schema.Types.ObjectId, ref: "Car", required: true },
//   fuelType: {
//     type: String,
//     enum: ["–±–µ–Ω–∑–∏–Ω", "–¥–∏–∑–µ–ª—å", "–≥—ñ–±—Ä–∏–¥", "–µ–ª–µ–∫—Ç—Ä–æ"],
//     required: true,
//   },

//   combustionEngine: {
//     engineDisplacement: Number,
//     horsepower: Number,
//     torque: Number,
//     fuelConsumption: Number,
//     transmission: String,
//   },

//   hybrid: {
//     hybridType: String,
//     engineDisplacement: Number,
//     electricMotorPower: Number,
//     totalHorsepower: Number,
//     electricRange: Number,
//   },

//   electric: {
//     batteryCapacity: Number,
//     range: Number,
//     electricMotorPower: Number,
//     chargeTime: String,
//     chargePort: String,
//   },

//   source: {
//     type: String,
//     enum: ["manual", "auto-ria", "wikipedia"],
//     required: true,
//   },

//   additionalSpecs: {
//     type: Map,
//     of: mongoose.Schema.Types.Mixed,
//     default: {},
//   },
// });

// module.exports = mongoose.model("CarSpecs", CarSpecsSchema);
