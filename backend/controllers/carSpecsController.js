const CarSpecs = require("../models/CarSpecsSchema");
const { aiSearchFunction } = require("../utils/aiSearch");
const bingSearchFunction = require("../utils/bingSearch");
const { msnSearchFunction } = require("../utils/msnSearchCarSpecs");
const { googleSearchCarSpecs } = require("../utils/googleSearch");
const { nhtsaSearchCarSpecs } = require("../utils/nhtsaSearch");
const axios = require("axios");
require("dotenv").config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const cheerio = require("cheerio");

// const AUTO_RIA_API_KEY = process.env.AUTO_RIA_API_KEY;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É HTML —Ç–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π
const parseCarSpecs = async (url) => {
  try {
    const response = await axios.get(url, {
      // headers: { "User-Agent": "Mozilla/5.0 ..." },
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
      },
    });
    // console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ HTML:\n", response.data);

    // –ü–∞—Ä—Å–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É, —à—É–∫–∞—î–º–æ –¥–∞–Ω—ñ
    const $ = cheerio.load(response.data);
    let fuelType = $("span.fuel-type").text().trim().toLowerCase();

    // –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –Ω–∞–∑–≤–∏ —É —Ñ–æ—Ä–º–∞—Ç MongoDB
    const fuelTypeMap = {
      gasoline: "–±–µ–Ω–∑–∏–Ω",
      diesel: "–¥–∏–∑–µ–ª—å",
      hybrid: "–≥—ñ–±—Ä–∏–¥",
      electric: "–µ–ª–µ–∫—Ç—Ä–æ",
    };

    fuelType = fuelTypeMap[fuelType] || "";

    if (!fuelType) {
      console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ø–∞–ª–∏–≤–∞, —Å—Ç–∞–≤–∏–º–æ '–±–µ–Ω–∑–∏–Ω'");
      fuelType = "–±–µ–Ω–∑–∏–Ω"; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }

    // console.log("üìå –û—Ç—Ä–∏–º–∞–Ω—ñ —Å–∏—Ä—ñ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:", $.html());
    console.log("üìå –û–±'—î–º –¥–≤–∏–≥—É–Ω–∞:", $("span.engine-size").text());
    console.log("üìå –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:", $("span.hp").text());
    console.log("üìå –ö—Ä—É—Ç–Ω–∏–π –º–æ–º–µ–Ω—Ç:", $("span.torque").text());
    console.log("üìå –í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ:", $("span.fuel-consumption").text());
    console.log("üìå –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á:", $("span.transmission").text());

    return {
      fuelType,
      combustionEngine: {
        engineDisplacement: parseFloat($("span.engine-size").text()) || 0,
        horsepower: parseInt($("span.hp").text()) || 0,
        torque: parseInt($("span.torque").text()) || 0,
        fuelConsumption: parseFloat($("span.fuel-consumption").text()) || 0,
        transmission: $("span.transmission").text().trim() || "–Ω–µ–≤—ñ–¥–æ–º–æ",
      },
    };
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", error.message);
    return null;
  }
};

// exports.msnSearchCarSpecs = async (req, res) => {
//   const { make, model, year, carId } = req.body;

//   try {
//     const msnResults = await msnSearchFunction(make, model, year);

//     if (msnResults && msnResults.length > 0) {
//       const carSpecs = new CarSpecs({
//         carId,
//         source: "msn",
//         usefulLinks: msnResults.map((result) => ({
//           title: result.title,
//           url: result.url,
//         })),
//         additionalSpecs: {
//           description: `–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ —á–µ—Ä–µ–∑ MSN (site:autos.msn.com) –¥–ª—è ${make} ${model} ${year}`,
//         },
//       });

//       await carSpecs.save();
//       res
//         .status(200)
//         .json({ message: "MSN-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!", carSpecs });
//     } else {
//       res
//         .status(404)
//         .json({ message: "MSN –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
//     }
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ MSN-–ø–æ—à—É–∫—É:", error);
//     res.status(500).json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ MSN." });
//   }
// };

exports.msnSearchCarSpecs = async (req, res) => {
  const { make, model, year, carId } = req.body;

  try {
    const msnResults = await msnSearchFunction(make, model, year);

    if (!msnResults || msnResults.length === 0) {
      return res
        .status(404)
        .json({ message: "MSN –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
    }

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ MSN –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ
    const existing = await CarSpecs.findOne({ carId, source: "msn" });

    if (existing) {
      return res.status(409).json({
        message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ MSN –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ.",
        existingSpecs: existing,
      });
    }

    // ‚úÖ –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ
    const carSpecs = new CarSpecs({
      carId,
      source: "msn",
      usefulLinks: msnResults.map((result) => ({
        title: result.title,
        url: result.url,
      })),
      additionalSpecs: {
        description: `–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ —á–µ—Ä–µ–∑ MSN (site:autos.msn.com) –¥–ª—è ${make} ${model} ${year}`,
      },
    });

    await carSpecs.save();

    res.status(200).json({
      message: "MSN-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!",
      carSpecs,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ MSN-–ø–æ—à—É–∫—É:", error);
    res.status(500).json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ MSN." });
  }
};

// const parseCarSpecs = async (url) => {
//   try {
//     console.log("URL IN PARCE : ", url);
//     const response = await axios.get(url);
//     const $ = cheerio.load(response.data); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ HTML

//     // –ü—Ä–∏–∫–ª–∞–¥: –ø–∞—Ä—Å–∏–º–æ —Ç–∏–ø –ø–∞–ª–∏–≤–∞
//     const fuelType = $("selector-for-fuel-type").text(); // –ó–∞–º—ñ—Å—Ç—å 'selector-for-fuel-type' –≤—Å—Ç–∞–≤—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–∏–ø—É –ø–∞–ª–∏–≤–∞

//     // –ü—Ä–∏–∫–ª–∞–¥: –ø–∞—Ä—Å–∏–º–æ –æ–±'—î–º –¥–≤–∏–≥—É–Ω–∞
//     const engineDisplacement = $("selector-for-engine-displacement").text(); // –ó–∞–º—ñ—Å—Ç—å 'selector-for-engine-displacement' –≤—Å—Ç–∞–≤—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –æ–±'—î–º—É –¥–≤–∏–≥—É–Ω–∞

//     // –Ü–Ω—à—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
//     const horsepower = $("selector-for-horsepower").text();
//     const torque = $("selector-for-torque").text();
//     const fuelConsumption = $("selector-for-fuel-consumption").text();
//     const transmission = $("selector-for-transmission").text();

//     return {
//       fuelType,
//       combustionEngine: {
//         engineDisplacement,
//         horsepower,
//         torque,
//         fuelConsumption,
//         transmission,
//       },
//     };
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥—É:", error);
//     return null;
//   }
// };

// –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏)
const CACHE_EXPIRATION = 24 * 60 * 60 * 1000;

// ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É –±–∞–∑—É
exports.addCarSpecs = async (req, res) => {
  try {
    const specs = new CarSpecs(req.body);
    await specs.save();
    res.status(201).json(specs);
  } catch (error) {
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ –±–∞–∑–∏
exports.getCarSpecs = async (req, res) => {
  try {
    const specs = await CarSpecs.findOne({ carId: req.params.carId });
    if (!specs) {
      return res.status(404).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json(specs);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ" });
  }
};

// // AI-–ø–æ—à—É–∫ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
// exports.aiSearchCarSpecs = async (req, res) => {
//   try {
//     const { make, model, year, carId } = req.query;

//     if (!make || !model || !year || !carId) {
//       return res.status(400).json({ error: "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏" });
//     }

//     console.log("üîé AI-–ø–æ—à—É–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è:", { make, model, year });

//     // –°–∏–º—É–ª—è—Ü—ñ—è –∑–∞–ø–∏—Ç—É –¥–æ AI (–∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π –ø–æ—à—É–∫)
//     const aiSpecs = {
//       fuelType: "–±–µ–Ω–∑–∏–Ω",
//       combustionEngine: {
//         engineDisplacement: 2998,
//         horsepower: 375,
//         torque: 500,
//         fuelConsumption: 9.0,
//         transmission: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞",
//       },
//       source: "AI", // –î–æ–¥–∞—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –ø–æ–ª—è source
//     };

//     // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É –±–∞–∑—É
//     const specs = new CarSpecs({ carId, ...aiSpecs });
//     await specs.save();

//     res.json(specs);
//   } catch (error) {
//     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ AI-–ø–æ—à—É–∫—É:", error);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫" });
//   }
// };

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS —ñ NHTSA
// exports.getCarSpecsFromGCS = async (req, res) => {
//   try {
//     const { carId, make, model, year, vin } = req.body;

//     // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤
//     if (!carId || (!vin && (!make || !model || !year))) {
//       return res
//         .status(400)
//         .json({ error: "–ü–æ—Ç—Ä—ñ–±–µ–Ω carId —ñ VIN –∞–±–æ make, model, year" });
//     }

//     // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö —É –∫–µ—à—ñ
//     let existingSpecs = await CarSpecs.findOne({ carId, source: "nhtsa" });
//     if (existingSpecs) {
//       console.log("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É");
//       return res.status(200).json({
//         message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É",
//         carSpecs: existingSpecs,
//       });
//     }

//     // üîç –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ GCS
//     const results = await googleSearchCarSpecs(`${make} ${model} ${year}`);
//     const usefulLinks = results.length
//       ? results.map((item) => ({
//           title: item.title,
//           url: item.link,
//         }))
//       : [];

//     // üîç –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ NHTSA API
//     const nhtsaSpecs = await nhtsaSearchCarSpecs({ vin, make, model, year });
//     if (!nhtsaSpecs) {
//       // –Ø–∫—â–æ NHTSA –Ω–µ –¥–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
//       const newCarSpecs = new CarSpecs({
//         carId,
//         source: "gcs", // –î–∂–µ—Ä–µ–ª–æ –ª–∏—à–µ GCS, —è–∫—â–æ NHTSA –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
//         usefulLinks,
//       });
//       await newCarSpecs.save();
//       return res.status(200).json({
//         message:
//           "–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
//         carSpecs: newCarSpecs,
//       });
//     }

//     // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É MongoDB –∑ –¥–∞–Ω–∏–º–∏ –∑ NHTSA
//     const newCarSpecs = new CarSpecs({
//       carId,
//       source: "nhtsa", // –î–∂–µ—Ä–µ–ª–æ ‚Äî NHTSA, –æ—Å–∫—ñ–ª—å–∫–∏ –¥–æ–¥–∞—î–º–æ –π–æ–≥–æ –¥–∞–Ω—ñ
//       usefulLinks,
//       ...nhtsaSpecs, // –†–æ–∑–ø–∞–∫–æ–≤—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ NHTSA
//     });

//     await newCarSpecs.save();
//     console.log("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB");

//     res.status(200).json({
//       message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω–æ",
//       carSpecs: newCarSpecs,
//     });
//   } catch (error) {
//     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getCarSpecsFromGCS:", error.message);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS —ñ NHTSA
exports.getCarSpecsFromGCS = async (req, res) => {
  try {
    const { carId, make, model, year, vin } = req.body;

    if (!carId || (!vin && (!make || !model || !year))) {
      return res
        .status(400)
        .json({ error: "–ü–æ—Ç—Ä—ñ–±–µ–Ω carId —ñ VIN –∞–±–æ make, model, year" });
    }

    let existingSpecs = await CarSpecs.findOne({ carId, source: "nhtsa" });
    if (existingSpecs) {
      console.log("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É");
      return res.status(200).json({
        message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É",
        carSpecs: existingSpecs,
      });
    }

    const results = await googleSearchCarSpecs(`${make} ${model} ${year}`);
    const usefulLinks = results.length
      ? results.map((item) => ({
          title: item.title,
          url: item.link,
        }))
      : [];
    console.log("üîç –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ GCS:", usefulLinks);

    const nhtsaSpecs = await nhtsaSearchCarSpecs({ vin, make, model, year });
    console.log("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥ NHTSA:", nhtsaSpecs);

    if (!nhtsaSpecs) {
      const newCarSpecs = new CarSpecs({
        carId,
        source: "gcs",
        usefulLinks,
      });
      await newCarSpecs.save();
      console.log("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ GCS");
      return res.status(200).json({
        message:
          "–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
        carSpecs: newCarSpecs,
      });
    }

    const newCarSpecs = new CarSpecs({
      carId,
      source: "nhtsa",
      usefulLinks,
      ...nhtsaSpecs,
    });

    await newCarSpecs.save();
    console.log("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB");

    res.status(200).json({
      message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω–æ",
      carSpecs: newCarSpecs,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getCarSpecsFromGCS:", error.message);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// // –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS
// exports.getCarSpecsFromGCS = async (req, res) => {
//   try {
//     const { carId, make, model, year } = req.body;

//     if (!carId || !make || !model || !year) {
//       return res
//         .status(400)
//         .json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ carId, make, model, —ñ year" });
//     }

//     // // –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ GCS...
//     // const results = await googleSearchCarSpecs(`${make} ${model} ${year}`);

//     // if (results.length === 0) {
//     //   return res.status(404).json({ error: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó" });
//     // }

//     // let carSpecs = null;
//     // for (let i = 0; i < results.length; i++) {
//     //   const specs = await parseCarSpecs(results[i].link);
//     //   if (specs) {
//     //     carSpecs = specs; // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∑–±–µ—Ä—ñ–≥–∞—î–º–æ
//     //     break; // –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É, –∫–æ–ª–∏ –∑–Ω–∞–π—à–ª–∏ –ø–æ—Ç—Ä—ñ–±–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
//     //   }
//     // }

//     // // –¢—É—Ç –º–∏ –±—ñ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ carSpecs, –æ—Å–∫—ñ–ª—å–∫–∏ —Ö–æ—á–µ–º–æ –∑–±–µ—Ä–µ–≥—Ç–∏ –Ω–∞–≤—ñ—Ç—å –ø—É—Å—Ç—ñ –¥–∞–Ω—ñ, —è–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ

//     // // –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
//     // const usefulLinks = results.map((item) => ({
//     //   title: item.title,
//     //   url: item.link,
//     // }));
//     // üîç –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ GCS
//     const results = await googleSearchCarSpecs(`${make} ${model} ${year}`);

//     // –Ø–∫—â–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
//     const usefulLinks = results.length
//       ? results.map((item) => ({
//           title: item.title,
//           url: item.link,
//         }))
//       : [];

//     // üîç –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ NHTSA API
//     const carSpecs = await nhtsaSearchCarSpecs(make, model, year);

//     if (!carSpecs) {
//       return res.status(404).json({
//         error: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –≤ NHTSA API",
//         usefulLinks, // –í—Å–µ –æ–¥–Ω–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
//       });
//     }

//     // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É MongoDB, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ carSpecs –ø–æ—Ä–æ–∂–Ω—î
//     const newCarSpecs = new CarSpecs({
//       carId,
//       source: "gcs",
//       usefulLinks,
//       ...carSpecs, // –î–æ–¥–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, —è–∫—â–æ –≤–æ–Ω–∏ —î
//     });

//     await newCarSpecs.save();

//     res
//       .status(200)
//       .json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω–æ", carSpecs: newCarSpecs });
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS:", error);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };
// exports.getCarSpecsFromGCS = async (req, res) => {
//   try {
//     const { carId, make, model, year } = req.body;

//     if (!carId || !make || !model || !year) {
//       return res
//         .status(400)
//         .json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ carId, make, model, —ñ year" });
//     }

//     // –õ–æ–≥—ñ–∫–∞ –ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —á–µ—Ä–µ–∑ GCS...
//     const results = await googleSearchCarSpecs(`${make} ${model} ${year}`);

//     if (results.length === 0) {
//       return res.status(404).json({ error: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó" });
//     }

//     // –ü—Ä–∏–∫–ª–∞–¥ –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
//     const additionalSpecs = {
//       exampleSpec: "–î–∞–Ω—ñ –∑ GCS",
//     };

//     const usefulLinks = results.map((item) => ({
//       title: item.title,
//       url: item.link,
//     }));

//     // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —É –±–∞–∑—É MongoDB
//     const carSpecs = new CarSpecs({
//       carId,
//       source: "gcs",
//       additionalSpecs,
//       usefulLinks,
//     });

//     await carSpecs.save();

//     res.status(200).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω–æ", carSpecs });
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS:", error);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// exports.getCarSpecsFromGCS = async (req, res) => {
//   try {
//     const { carId, query } = req.body;

//     if (!carId || !query) {
//       return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω—ñ carId —ñ query" });
//     }

//     // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ GCS
//     const results = await googleSearchCarSpecs(query);

//     if (results.length === 0) {
//       return res.status(404).json({ error: "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó" });
//     }

//     // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è
//     const usefulLinks = results.map((item) => ({
//       title: item.title,
//       url: item.link,
//     }));

//     // –î–æ–¥–∞—Ç–∫–æ–≤—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (—Å—é–¥–∏ –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –ø–∞—Ä—Å–∏–Ω–≥—É)
//     const additionalSpecs = {
//       exampleSpec: "–î–∞–Ω—ñ –∑ GCS",
//     };

//     // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ MongoDB
//     const carSpecs = new CarSpecs({
//       carId,
//       source: "gcs",
//       additionalSpecs,
//       usefulLinks,
//     });

//     await carSpecs.save();

//     res.status(200).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω—ñ", carSpecs });
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS:", error);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//   }
// };

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ –∑ GCS
exports.getCarSpecsByCarId = async (req, res) => {
  try {
    const carSpecs = await CarSpecs.findOne({ carId: req.params.carId });

    if (!carSpecs) {
      return res.status(404).json({ error: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ" });
    }

    res.status(200).json(carSpecs);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ Bing-–ø–æ—à—É–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
exports.bingSearchCarSpecs = async (req, res) => {
  const { make, model, year, carId } = req.body;

  try {
    const bingResults = await bingSearchFunction(make, model, year);

    if (bingResults && bingResults.length > 0) {
      const carSpecs = new CarSpecs({
        carId,
        source: "bing",
        usefulLinks: bingResults.map((result) => ({
          title: result.title,
          url: result.url,
        })),
        additionalSpecs: {
          description: `–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ —á–µ—Ä–µ–∑ Bing –¥–ª—è ${make} ${model} ${year}`,
        },
      });

      await carSpecs.save();
      res
        .status(200)
        .json({ message: "Bing-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!", carSpecs });
    } else {
      res
        .status(404)
        .json({ message: "Bing –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ Bing-–ø–æ—à—É–∫—É:", error);
    res.status(500).json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Bing." });
  }
};

exports.aiSearchCarSpecs = async (req, res) => {
  const { make, model, year, carId } = req.body;

  try {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ AI –¥–ª—è –ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const aiResponse = await aiSearchFunction(make, model, year);

    if (aiResponse) {
      const carSpecs = new CarSpecs({
        carId,
        source: "AI", // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Ü–µ AI –ø–æ—à—É–∫
        fuelType: aiResponse.fuelType,
        combustionEngine: {
          engineDisplacement: aiResponse.engineDisplacement,
          horsepower: aiResponse.horsepower,
          torque: aiResponse.torque,
          transmission: aiResponse.transmission,
        },
        electric: {
          batteryCapacity: aiResponse.batteryCapacity,
          electricRange: aiResponse.electricRange,
        },
        additionalSpecs: aiResponse.additionalSpecs || {},
      });

      await carSpecs.save();
      res
        .status(200)
        .json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ!", carSpecs });
    } else {
      res
        .status(404)
        .json({ message: "AI –Ω–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ AI-–ø–æ—à—É–∫—É:", error);
    res
      .status(500)
      .json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ AI-–ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫." });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ Wikipedia
exports.scrapeCarSpecs = async (req, res) => {
  const { make, model, year } = req.query;
  console.log("üîµ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç:", { make, model, year });

  let url = `https://en.wikipedia.org/wiki/${make}_${model}`;
  if (year) {
    url += `_${year}`;
  }

  console.log("üåç –í—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞:", url);
  return res.json({ wikipediaUrl: url });
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ AUTO.RIA
exports.getAutoRiaSpecs = async (req, res) => {
  try {
    const { make, model, year, carId } = req.query;
    console.log("üîµ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∞–≤—Ç–æ:", { make, model, year, carId });

    if (!make || !model || !year || !carId) {
      return res.status(400).json({ error: "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏" });
    }

    // 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É –≤ MongoDB
    const existingSpecs = await CarSpecs.findOne({ carId, source: "auto-ria" });
    if (existingSpecs) {
      const timeDiff = Date.now() - existingSpecs.createdAt.getTime();
      if (timeDiff < CACHE_EXPIRATION) {
        console.log("‚úÖ –î–∞–Ω—ñ –≤–∑—è—Ç–æ –∑ –∫–µ—à—É");
        return res.json(existingSpecs);
      }
    }

    const API_KEY = process.env.AUTO_RIA_API_KEY;

    // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞
    console.log("üîç –ü–æ—à—É–∫ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞...");
    const markaResponse = await axios.get(
      `https://developers.ria.com/auto/categories/1/marks?api_key=${API_KEY}`
    );
    const marka = markaResponse.data.find(
      (m) => m.name.toLowerCase() === make.toLowerCase()
    );

    if (!marka) {
      console.error("‚ùå –í–∏—Ä–æ–±–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π:", make);
      return res.status(404).json({ error: "–í–∏—Ä–æ–±–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    console.log(`‚úÖ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞ (${make}):`, marka.value);

    // 3Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ ID –º–æ–¥–µ–ª—ñ
    console.log("üîç –ü–æ—à—É–∫ ID –º–æ–¥–µ–ª—ñ...");
    const modelResponse = await axios.get(
      `https://developers.ria.com/auto/categories/1/marks/${marka.value}/models?api_key=${API_KEY}`
    );
    const modelData = modelResponse.data.find(
      (m) => m.name.toLowerCase() === model.toLowerCase()
    );

    if (!modelData) {
      console.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞:", model);
      return res.status(404).json({ error: "–ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    console.log(`‚úÖ ID –º–æ–¥–µ–ª—ñ (${model}):`, modelData.value);

    // 4Ô∏è‚É£ –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –∞–≤—Ç–æ
    console.log("üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –∞–≤—Ç–æ –Ω–∞ AUTO.RIA...");
    const searchUrl = `https://developers.ria.com/auto/search?api_key=${API_KEY}&marka_id=${marka.value}&model_id=${modelData.value}&yers=${year}&category_id=1`;

    const searchResponse = await axios.get(searchUrl);

    if (!searchResponse.data.result.search_result.ids.length) {
      console.log("‚ùå –ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return res.status(404).json({ error: "–ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const autoId = searchResponse.data.result.search_result.ids[0];
    console.log("üöó –ó–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ, ID:", autoId);

    // 5Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ
    console.log("üì• –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ...");
    const autoDetailsUrl = `https://developers.ria.com/auto/info?api_key=${API_KEY}&auto_id=${autoId}`;
    const detailsResponse = await axios.get(autoDetailsUrl);

    if (!detailsResponse.data) {
      console.error("‚ùå –î–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ");
      return res
        .status(500)
        .json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ" });
    }

    const autoData = detailsResponse.data;

    // 6Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–∑—É
    const specs = new CarSpecs({
      carId,
      source: "auto-ria",
      fuelType: autoData.fuelNameUa || "–Ω–µ–≤—ñ–¥–æ–º–æ",
      combustionEngine: autoData.engine_capacity
        ? {
            engineDisplacement: autoData.engine_capacity,
            horsepower: autoData.auto_power,
            torque: autoData.auto_torque,
            fuelConsumption: autoData.fuelConsumption,
            transmission: autoData.gearboxTypeName,
          }
        : null,
      electric:
        autoData.fuelNameUa === "–µ–ª–µ–∫—Ç—Ä–æ"
          ? {
              batteryCapacity: autoData.battery_capacity,
              range: autoData.range,
              electricMotorPower: autoData.auto_power,
              chargeTime: autoData.charge_time,
              chargePort: autoData.charge_port,
            }
          : null,
      additionalSpecs: {
        doors: autoData.auto_door,
        seats: autoData.auto_seat,
      },
    });

    await specs.save();
    console.log("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB");

    res.json(specs);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error.message || error);
    if (error.response) {
      console.error(
        "üî• –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:",
        error.response.status,
        error.response.data
      );
      return res
        .status(error.response.status)
        .json({ error: error.response.data });
    }
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É" });
  }
};

// exports.searchCarOnAutoRia = async (req, res) => {
//   const { make, model, year } = req.query;
//   console.log("üîµ –ü–æ—à—É–∫ –∞–≤—Ç–æ:", { make, model, year });

//   if (!AUTO_RIA_API_KEY) {
//     return res
//       .status(500)
//       .json({ error: "‚ùå API-–∫–ª—é—á –¥–ª—è AUTO.RIA –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!" });
//   }

//   try {
//     // üîπ –ö—Ä–æ–∫ 1: –û—Ç—Ä–∏–º—É—î–º–æ ID –±—Ä–µ–Ω–¥—É (marka_id)
//     const marksUrl = `https://developers.ria.com/auto/categories/1/marks?api_key=${AUTO_RIA_API_KEY}`;
//     const marksResponse = await axios.get(marksUrl);
//     const brand = marksResponse.data.find(
//       (b) => b.name.toLowerCase() === make.toLowerCase()
//     );

//     if (!brand) {
//       return res
//         .status(404)
//         .json({ error: `‚ùå –í–∏—Ä–æ–±–Ω–∏–∫ '${make}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π!` });
//     }

//     const marka_id = brand.value;
//     console.log(`‚úÖ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞ (${make}):`, marka_id);

//     // üîπ –ö—Ä–æ–∫ 2: –û—Ç—Ä–∏–º—É—î–º–æ ID –º–æ–¥–µ–ª—ñ (model_id)
//     const modelsUrl = `https://developers.ria.com/auto/categories/1/marks/${marka_id}/models?api_key=${AUTO_RIA_API_KEY}`;
//     const modelsResponse = await axios.get(modelsUrl);
//     const carModel = modelsResponse.data.find(
//       (m) => m.name.toLowerCase() === model.toLowerCase()
//     );

//     if (!carModel) {
//       return res.status(404).json({
//         error: `‚ùå –ú–æ–¥–µ–ª—å '${model}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —É –≤–∏—Ä–æ–±–Ω–∏–∫–∞ '${make}'!`,
//       });
//     }

//     const model_id = carModel.value;
//     console.log(`‚úÖ ID –º–æ–¥–µ–ª—ñ (${model}):`, model_id);

//     // üîπ –ö—Ä–æ–∫ 3: –ü–æ—à—É–∫ –∞–≤—Ç–æ –∑–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
//     const searchUrl = `https://developers.ria.com/auto/search?api_key=${AUTO_RIA_API_KEY}&marka_id=${marka_id}&model_id=${model_id}&yers=${year}&category_id=1`;
//     console.log("üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –∑–∞ URL:", searchUrl);

//     const searchResponse = await axios.get(searchUrl);

//     if (!searchResponse.data.result.search_result.ids.length) {
//       return res
//         .status(404)
//         .json({ error: "‚ùå –ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –∑–∞–¥–∞–Ω–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!" });
//     }

//     // –ë–µ—Ä–µ–º–æ –ø–µ—Ä—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
//     const carId = searchResponse.data.result.search_result.ids[0];
//     console.log("üöó –ó–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ, ID:", carId);

//     // üîπ –ö—Ä–æ–∫ 4: –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∞–≤—Ç–æ
//     const carDetailsUrl = `https://developers.ria.com/auto/info?api_key=${AUTO_RIA_API_KEY}&auto_id=${carId}`;
//     const carDetailsResponse = await axios.get(carDetailsUrl);

//     res.json(carDetailsResponse.data);
//   } catch (error) {
//     console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–æ—à—É–∫—É –∞–≤—Ç–æ:", error.message);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –ø–æ—à—É–∫—É –∞–≤—Ç–æ." });
//   }
// };

// // ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ Wikipedia
// exports.scrapeCarSpecs = async (req, res) => {
//   const { make, model, year } = req.query;
//   console.log("üîµ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥:", req.query);
//   console.log("üîµ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç:", { make, model, year });

//   try {
//     let url = `https://en.wikipedia.org/wiki/${make}_${model}`;
//     if (year) {
//       url += `_${year}`;
//     }
//     console.log("–û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É:", url);
//     console.log("üåç –§–æ—Ä–º—É—î—Ç—å—Å—è –∑–∞–ø–∏—Ç –¥–æ:", url);

//     let { data } = await axios.get(url, {
//       headers: { "User-Agent": "Mozilla/5.0" }, // –î–æ–¥–∞—î–º–æ User-Agent, —â–æ–± –æ–±—ñ–π—Ç–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è
//     });

//     console.log("üü¢ HTML –æ—Ç—Ä–∏–º–∞–Ω–æ, –¥–æ–≤–∂–∏–Ω–∞:", data.length);
//     console.log("üîç –ü–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤:", data.slice(0, 500));

//     // let { data } = await axios.get(url);
//     // console.log("HTML —Å—Ç–æ—Ä—ñ–Ω–∫–∏:", data.slice(0, 500)); // –í–∏–≤–µ–¥–µ –ø–µ—Ä—à—ñ 500 —Å–∏–º–≤–æ–ª—ñ–≤ HTML

//     let $ = cheerio.load(data);

//     let specifications = {};
//     const tableExists = $("table.infobox").length > 0;
//     console.log("–¢–∞–±–ª–∏—Ü—è –∑–Ω–∞–π–¥–µ–Ω–∞?", tableExists);

//     console.log("HTML —Ç–∞–±–ª–∏—Ü—ñ:", $("table.infobox").html());

//     if (!$("table.infobox").length) {
//       console.error("–¢–∞–±–ª–∏—Ü—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!");
//       return res
//         .status(404)
//         .json({ error: "–¢–∞–±–ª–∏—Ü—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞." });
//     }

//     $("table.infobox tr").each((index, element) => {
//       const key = $(element).find("th").text().trim();
//       // const value = $(element).find("td").text().trim();
//       const value = $(element)
//         .find("td")
//         .text()
//         .replace(/\[.*?\]/g, "")
//         .trim();
//       console.log(`üîπ ${key}: ${value}`); // –í–∏–≤—ñ–¥ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫

//       if (key && value) {
//         specifications[key] = value;
//       }
//     });

//     // –Ø–∫—â–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–±—É—î–º–æ –±–µ–∑ —Ä–æ–∫—É
//     if (Object.keys(specifications).length === 0 && year) {
//       console.warn(`–°—Ç–æ—Ä—ñ–Ω–∫–∞ ${url} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–±—É—î–º–æ –±–µ–∑ —Ä–æ–∫—É...`);
//       url = `https://en.wikipedia.org/wiki/${make}_${model}`;
//       data = (await axios.get(url)).data;
//       $ = cheerio.load(data);

//       $("table.infobox tr").each((index, element) => {
//         const key = $(element).find("th").text().trim();
//         const value = $(element).find("td").text().trim();

//         if (key && value) {
//           specifications[key] = value;
//         }
//       });
//     }

//     if (Object.keys(specifications).length === 0) {
//       return res.status(404).json({ error: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ." });
//     }

//     console.log("–û—Ç—Ä–∏–º–∞–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:", specifications);

//     res.json(specifications);
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", error.message);
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫." });
//   }
// };

// exports.scrapeCarSpecs = async (req, res) => {
//   const { make, model, year } = req.query;

//   if (!make || !model) {
//     return res.status(400).json({ error: "–ú–∞—Ä–∫–∞ —ñ –º–æ–¥–µ–ª—å –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
//   }

//   try {
//     // –§–æ—Ä–º—É—î–º–æ URL –¥–ª—è Wikipedia –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —Ä–æ–∫—É –≤–∏–ø—É—Å–∫—É
//     let url = `https://en.wikipedia.org/wiki/${make}_${model}`;
//     if (year) {
//       url += `_${year}`; // –î–æ–¥–∞—î–º–æ —Ä—ñ–∫, —è–∫—â–æ –≤—ñ–Ω –≤–∫–∞–∑–∞–Ω–∏–π
//     }

//     const { data } = await axios.get(url);
//     const $ = cheerio.load(data);

//     const specifications = {};

//     // –ü–∞—Ä—Å–∏–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ
//     $("table.infobox tr").each((index, element) => {
//       const key = $(element).find("th").text().trim();
//       const value = $(element).find("td").text().trim();
//       if (key && value) {
//         specifications[key] = value;
//       }
//     });

//     if (Object.keys(specifications).length === 0) {
//       return res.status(404).json({ error: "–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
//     }

//     res.json(specifications);
//   } catch (error) {
//     console.error("–ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", error.message);
//     res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" });
//   }
// };

// const CarSpecs = require("../models/CarSpecsSchema");

// exports.addCarSpecs = async (req, res) => {
//   try {
//     const specs = new CarSpecs(req.body);
//     await specs.save();
//     res.status(201).json(specs);
//   } catch (error) {
//     res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ" });
//   }
// };

// exports.getCarSpecs = async (req, res) => {
//   try {
//     const specs = await CarSpecs.findOne({ carId: req.params.carId });
//     if (!specs) {
//       return res.status(404).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
//     }
//     res.json(specs);
//   } catch (error) {
//     res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ" });
//   }
// };
