const CarSpecs = require("../models/CarSpecsSchema");
const { aiSearchFunction } = require("../utils/aiSearch");
const bingSearchFunction = require("../utils/bingSearch");
const { msnSearchFunction } = require("../utils/msnSearchCarSpecs");
const { googleSearchCarSpecs } = require("../utils/googleSearch");
const { nhtsaSearchCarSpecs } = require("../utils/nhtsaSearch");
const axios = require("axios");
require("dotenv").config(); // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
const cheerio = require("cheerio");

// const AUTO_RIA_API_KEY = process.env.AUTO_RIA_API_KEY;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥—É HTML —Ç–∞ –≤–∏—Ç—è–≥–Ω–µ–Ω–Ω—è —Å–ø–µ—Ü–∏—Ñ—ñ–∫–∞—Ü—ñ–π
const parseCarSpecs = async (url) => {
  try {
    const response = await axios.get(url, {
      // headers: { "User-Agent": "Mozilla/5.0 ..." },
      headers: {
        "User-Agent":
          "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
      },
    });
    // console.log("üìå –û—Ç—Ä–∏–º–∞–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞ HTML:\n", response.data);

    // –ü–∞—Ä—Å–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É, —à—É–∫–∞—î–º–æ –¥–∞–Ω—ñ
    const $ = cheerio.load(response.data);
    let fuelType = $("span.fuel-type").text().trim().toLowerCase();

    // –ü–µ—Ä–µ–∫–ª–∞–¥–∞—î–º–æ –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –Ω–∞–∑–≤–∏ —É —Ñ–æ—Ä–º–∞—Ç MongoDB
    const fuelTypeMap = {
      gasoline: "–±–µ–Ω–∑–∏–Ω",
      diesel: "–¥–∏–∑–µ–ª—å",
      hybrid: "–≥—ñ–±—Ä–∏–¥",
      electric: "–µ–ª–µ–∫—Ç—Ä–æ",
    };

    fuelType = fuelTypeMap[fuelType] || "";

    if (!fuelType) {
      console.warn("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–∑–Ω–∞—á–∏—Ç–∏ —Ç–∏–ø –ø–∞–ª–∏–≤–∞, —Å—Ç–∞–≤–∏–º–æ '–±–µ–Ω–∑–∏–Ω'");
      fuelType = "–±–µ–Ω–∑–∏–Ω"; // –ó–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    }

    // console.log("üìå –û—Ç—Ä–∏–º–∞–Ω—ñ —Å–∏—Ä—ñ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏:", $.html());
    console.log("üìå –û–±'—î–º –¥–≤–∏–≥—É–Ω–∞:", $("span.engine-size").text());
    console.log("üìå –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å:", $("span.hp").text());
    console.log("üìå –ö—Ä—É—Ç–Ω–∏–π –º–æ–º–µ–Ω—Ç:", $("span.torque").text());
    console.log("üìå –í–∏—Ç—Ä–∞—Ç–∞ –ø–∞–ª—å–Ω–æ–≥–æ:", $("span.fuel-consumption").text());
    console.log("üìå –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á:", $("span.transmission").text());

    return {
      fuelType,
      combustionEngine: {
        engineDisplacement: parseFloat($("span.engine-size").text()) || 0,
        horsepower: parseInt($("span.hp").text()) || 0,
        torque: parseInt($("span.torque").text()) || 0,
        fuelConsumption: parseFloat($("span.fuel-consumption").text()) || 0,
        transmission: $("span.transmission").text().trim() || "–Ω–µ–≤—ñ–¥–æ–º–æ",
      },
    };
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É:", error.message);
    return null;
  }
};

exports.msnSearchCarSpecs = async (req, res) => {
  // const { make, model, year, carId } = req.body;
  const { make, model, year, carId, createdBy } = req.body; // üõ†Ô∏è –î–æ–¥–∞—î–º–æ createdBy

  try {
    const msnResults = await msnSearchFunction(make, model, year);

    if (!msnResults || msnResults.length === 0) {
      return res
        .status(404)
        .json({ message: "MSN –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
    }

    // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—é—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ MSN –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ
    const existing = await CarSpecs.findOne({ carId, source: "msn" });

    if (existing) {
      return res.status(409).json({
        message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∑ MSN –≤–∂–µ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ.",
        existingSpecs: existing,
      });
    }

    // ‚úÖ –Ø–∫—â–æ –Ω–µ–º–∞—î ‚Äî –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–æ–≤—ñ
    const carSpecs = new CarSpecs({
      carId,
      createdBy,
      source: "msn",
      usefulLinks: msnResults.map((result) => ({
        title: result.title,
        url: result.url,
      })),
      additionalSpecs: {
        description: `–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ —á–µ—Ä–µ–∑ MSN (site:autos.msn.com) –¥–ª—è ${make} ${model} ${year}`,
      },
    });

    await carSpecs.save();

    res.status(200).json({
      message: "MSN-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!",
      carSpecs,
    });
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ MSN-–ø–æ—à—É–∫—É:", error);
    res.status(500).json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ MSN." });
  }
};

// –ö–µ—à—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –Ω–∞ 24 –≥–æ–¥–∏–Ω–∏)
const CACHE_EXPIRATION = 24 * 60 * 60 * 1000;

// ‚úÖ –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É –±–∞–∑—É
exports.addCarSpecs = async (req, res) => {
  try {
    const { carId, createdBy, ...rest } = req.body; // üõ†Ô∏è –û–ù–û–í–õ–ï–ù–û: createdBy
    // const specs = new CarSpecs(req.body);
    const specs = new CarSpecs({
      carId,
      createdBy,
      // source: "manual",
      source,
      ...rest,
    });
    await specs.save();
    res.status(201).json(specs);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:", error);
    res.status(500).json({ error: "–ù–µ –≤–¥–∞–ª–æ—Å—è –¥–æ–¥–∞—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ" });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ –±–∞–∑–∏
exports.getCarSpecs = async (req, res) => {
  try {
    // const specs = await CarSpecs.findOne({ carId: req.params.carId });
    const specs = await CarSpecs.findOne({ carId: req.params.carId })
      .populate("carId", "brand name year")
      .populate("createdBy", "name email"); // üõ†Ô∏è –û–ù–û–í–õ–ï–ù–û
    if (!specs) {
      return res.status(404).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json(specs);
  } catch (error) {
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ" });
  }
};

// üÜï –û–ù–û–í–õ–ï–ù–ù–Ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
exports.updateCarSpecs = async (req, res) => {
  try {
    const { carId } = req.params;
    // const { userId, ...updates } = req.body; // üõ†Ô∏è userId –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –≤–ª–∞—Å–Ω–∏–∫–∞
    const updates = req.body;

    const existingSpecs = await CarSpecs.findById(carId);
    if (!existingSpecs) {
      return res.status(404).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const userId = req.user._id;
    const isAdmin = req.user.isAdmin;

    // if (existingSpecs.createdBy.toString() !== userId) {
    //   return res
    //     .status(403)
    //     .json({ message: "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ü—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" });
    // }
    if (!existingSpecs.createdBy.equals(userId) && !isAdmin) {
      return res.status(403).json({
        message: "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏ —Ü—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
      });
    }

    Object.assign(existingSpecs, updates);
    await existingSpecs.save();

    res
      .status(200)
      .json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ–Ω–æ–≤–ª–µ–Ω–æ!", carSpecs: existingSpecs });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" });
  }
};

// üÜï –í–ò–î–ê–õ–ï–ù–ù–Ø —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
exports.deleteCarSpecs = async (req, res) => {
  try {
    const { carId } = req.params;
    // const { userId } = req.body;

    const existingSpecs = await CarSpecs.findById(carId);
    if (!existingSpecs) {
      return res.status(404).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const userId = req.user._id;
    const isAdmin = req.user.isAdmin;

    // if (existingSpecs.createdBy.toString() !== userId) {
    //   return res
    //     .status(403)
    //     .json({ message: "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —Ü—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" });
    // }
    if (!existingSpecs.createdBy.equals(userId) && !isAdmin) {
      return res.status(403).json({
        message: "–í–∏ –Ω–µ –º–∞—î—Ç–µ –ø—Ä–∞–≤–∞ –≤–∏–¥–∞–ª—è—Ç–∏ —Ü—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏",
      });
    }

    await existingSpecs.deleteOne();
    res.status(200).json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–æ!" });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è:", error);
    res.status(500).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏" });
  }
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ GCS —ñ NHTSA
exports.getCarSpecsFromGCS = async (req, res) => {
  try {
    // const { carId, make, model, year, vin } = req.body;
    const { carId, make, model, year, vin, createdBy } = req.body;
    console.log("–û—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ –∑ –∫–ª—ñ—î–Ω—Ç–∞:", req.body);

    if (!carId || (!vin && (!make || !model || !year))) {
      return res
        .status(400)
        .json({ error: "–ü–æ—Ç—Ä—ñ–±–µ–Ω carId —ñ VIN –∞–±–æ make, model, year" });
    }

    let existingSpecs = await CarSpecs.findOne({ carId, source: "nhtsa" });
    if (existingSpecs) {
      console.log("‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É");
      return res.status(200).json({
        message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –∑ –∫–µ—à—É",
        carSpecs: existingSpecs,
      });
    }

    const results = await googleSearchCarSpecs(`${make} ${model} ${year}`);
    const usefulLinks = results.length
      ? results.map((item) => ({
          title: item.title,
          url: item.link,
        }))
      : [];
    console.log("üîç –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ GCS:", usefulLinks);

    const nhtsaSpecs = await nhtsaSearchCarSpecs({ vin, make, model, year });
    console.log("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –≤—ñ–¥ NHTSA:", nhtsaSpecs);

    if (!nhtsaSpecs) {
      const newCarSpecs = new CarSpecs({
        carId,
        createdBy,
        vin,
        source: "gcs",
        usefulLinks,
      });
      await newCarSpecs.save();
      console.log("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ GCS");
      return res.status(200).json({
        message:
          "–¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –∑–±–µ—Ä–µ–∂–µ–Ω–æ –ª–∏—à–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è",
        carSpecs: newCarSpecs,
      });
    }

    const newCarSpecs = new CarSpecs({
      carId,
      createdBy,
      vin,
      source: "nhtsa",
      usefulLinks,
      ...nhtsaSpecs,
    });

    await newCarSpecs.save();
    console.log("‚úÖ –î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB");

    res.status(200).json({
      message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–æ–¥–∞–Ω–æ",
      carSpecs: newCarSpecs,
    });
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ getCarSpecsFromGCS:", error.message);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ –∑ GCS
exports.getCarSpecsByCarId = async (req, res) => {
  try {
    const carSpecs = await CarSpecs.findOne({ carId: req.params.carId });

    if (!carSpecs) {
      return res.status(404).json({ error: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ" });
    }

    res.status(200).json(carSpecs);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫:", error);
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üîπ Bing-–ø–æ—à—É–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
exports.bingSearchCarSpecs = async (req, res) => {
  // const { make, model, year, carId } = req.body;
  const { make, model, year, carId, createdBy } = req.body; // üõ†Ô∏è –î–æ–¥–∞—î–º–æ createdBy

  try {
    const bingResults = await bingSearchFunction(make, model, year);

    if (bingResults && bingResults.length > 0) {
      const carSpecs = new CarSpecs({
        carId,
        createdBy,
        source: "bing",
        usefulLinks: bingResults.map((result) => ({
          title: result.title,
          url: result.url,
        })),
        additionalSpecs: {
          description: `–î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω—ñ —á–µ—Ä–µ–∑ Bing –¥–ª—è ${make} ${model} ${year}`,
        },
      });

      await carSpecs.save();
      res
        .status(200)
        .json({ message: "Bing-—Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω—ñ!", carSpecs });
    } else {
      res
        .status(404)
        .json({ message: "Bing –Ω–µ –∑–Ω–∞–π—à–æ–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ Bing-–ø–æ—à—É–∫—É:", error);
    res.status(500).json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —á–µ—Ä–µ–∑ Bing." });
  }
};

exports.aiSearchCarSpecs = async (req, res) => {
  // const { make, model, year, carId } = req.body;
  const { make, model, year, carId, createdBy } = req.body; // üõ†Ô∏è –î–æ–¥–∞—î–º–æ createdBy

  try {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ AI –¥–ª—è –ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    const aiResponse = await aiSearchFunction(make, model, year);

    if (aiResponse) {
      const carSpecs = new CarSpecs({
        carId,
        createdBy,
        source: "AI", // –ü–æ–∑–Ω–∞—á–∞—î–º–æ, —â–æ —Ü–µ AI –ø–æ—à—É–∫
        fuelType: aiResponse.fuelType,
        combustionEngine: {
          engineDisplacement: aiResponse.engineDisplacement,
          horsepower: aiResponse.horsepower,
          torque: aiResponse.torque,
          transmission: aiResponse.transmission,
        },
        electric: {
          batteryCapacity: aiResponse.batteryCapacity,
          electricRange: aiResponse.electricRange,
        },
        additionalSpecs: aiResponse.additionalSpecs || {},
      });

      await carSpecs.save();
      res
        .status(200)
        .json({ message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω—ñ!", carSpecs });
    } else {
      res
        .status(404)
        .json({ message: "AI –Ω–µ –∑–º—ñ–≥ –∑–Ω–∞–π—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ü—å–æ–≥–æ –∞–≤—Ç–æ." });
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ AI-–ø–æ—à—É–∫—É:", error);
    res
      .status(500)
      .json({ message: "–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ AI-–ø–æ—à—É–∫—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫." });
  }
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –∑ Wikipedia
exports.scrapeCarSpecs = async (req, res) => {
  const { make, model, year } = req.query;
  console.log("üîµ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç:", { make, model, year });

  let url = `https://en.wikipedia.org/wiki/${make}_${model}`;
  if (year) {
    url += `_${year}`;
  }

  console.log("üåç –í—ñ–¥–∫—Ä–∏–≤–∞—î—Ç—å—Å—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞:", url);
  return res.json({ wikipediaUrl: url });
};

// ‚úÖ –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∑ AUTO.RIA
exports.getAutoRiaSpecs = async (req, res) => {
  try {
    const { make, model, year, carId, createdBy } = req.query;
    console.log("üîµ –û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –∞–≤—Ç–æ:", { make, model, year, carId });

    if (!make || !model || !year || !carId) {
      return res.status(400).json({ error: "–í—ñ–¥—Å—É—Ç–Ω—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏" });
    }

    // 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–µ—à—É –≤ MongoDB
    const existingSpecs = await CarSpecs.findOne({ carId, source: "auto-ria" });
    if (existingSpecs) {
      const timeDiff = Date.now() - existingSpecs.createdAt.getTime();
      if (timeDiff < CACHE_EXPIRATION) {
        console.log("‚úÖ –î–∞–Ω—ñ –≤–∑—è—Ç–æ –∑ –∫–µ—à—É");
        return res.json(existingSpecs);
      }
    }

    const API_KEY = process.env.AUTO_RIA_API_KEY;

    // 2Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞
    console.log("üîç –ü–æ—à—É–∫ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞...");
    const markaResponse = await axios.get(
      `https://developers.ria.com/auto/categories/1/marks?api_key=${API_KEY}`
    );
    const marka = markaResponse.data.find(
      (m) => m.name.toLowerCase() === make.toLowerCase()
    );

    if (!marka) {
      console.error("‚ùå –í–∏—Ä–æ–±–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π:", make);
      return res.status(404).json({ error: "–í–∏—Ä–æ–±–Ω–∏–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π" });
    }

    console.log(`‚úÖ ID –≤–∏—Ä–æ–±–Ω–∏–∫–∞ (${make}):`, marka.value);

    // 3Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ ID –º–æ–¥–µ–ª—ñ
    console.log("üîç –ü–æ—à—É–∫ ID –º–æ–¥–µ–ª—ñ...");
    const modelResponse = await axios.get(
      `https://developers.ria.com/auto/categories/1/marks/${marka.value}/models?api_key=${API_KEY}`
    );
    const modelData = modelResponse.data.find(
      (m) => m.name.toLowerCase() === model.toLowerCase()
    );

    if (!modelData) {
      console.error("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞:", model);
      return res.status(404).json({ error: "–ú–æ–¥–µ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }

    console.log(`‚úÖ ID –º–æ–¥–µ–ª—ñ (${model}):`, modelData.value);

    // 4Ô∏è‚É£ –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –∞–≤—Ç–æ
    console.log("üîç –í–∏–∫–æ–Ω—É—î–º–æ –ø–æ—à—É–∫ –∞–≤—Ç–æ –Ω–∞ AUTO.RIA...");
    const searchUrl = `https://developers.ria.com/auto/search?api_key=${API_KEY}&marka_id=${marka.value}&model_id=${modelData.value}&yers=${year}&category_id=1`;

    const searchResponse = await axios.get(searchUrl);

    if (!searchResponse.data.result.search_result.ids.length) {
      console.log("‚ùå –ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return res.status(404).json({ error: "–ê–≤—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }

    const autoId = searchResponse.data.result.search_result.ids[0];
    console.log("üöó –ó–Ω–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ, ID:", autoId);

    // 5Ô∏è‚É£ –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ
    console.log("üì• –û—Ç—Ä–∏–º—É—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ...");
    const autoDetailsUrl = `https://developers.ria.com/auto/info?api_key=${API_KEY}&auto_id=${autoId}`;
    const detailsResponse = await axios.get(autoDetailsUrl);

    if (!detailsResponse.data) {
      console.error("‚ùå –î–∞–Ω—ñ –ø—Ä–æ –∞–≤—Ç–æ –Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–æ");
      return res
        .status(500)
        .json({ error: "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ" });
    }

    const autoData = detailsResponse.data;

    // 6Ô∏è‚É£ –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤ –±–∞–∑—É
    const specs = new CarSpecs({
      carId,
      createdBy,
      source: "auto-ria",
      fuelType: autoData.fuelNameUa || "–Ω–µ–≤—ñ–¥–æ–º–æ",
      combustionEngine: autoData.engine_capacity
        ? {
            engineDisplacement: autoData.engine_capacity,
            horsepower: autoData.auto_power,
            torque: autoData.auto_torque,
            fuelConsumption: autoData.fuelConsumption,
            transmission: autoData.gearboxTypeName,
          }
        : null,
      electric:
        autoData.fuelNameUa === "–µ–ª–µ–∫—Ç—Ä–æ"
          ? {
              batteryCapacity: autoData.battery_capacity,
              range: autoData.range,
              electricMotorPower: autoData.auto_power,
              chargeTime: autoData.charge_time,
              chargePort: autoData.charge_port,
            }
          : null,
      additionalSpecs: {
        doors: autoData.auto_door,
        seats: autoData.auto_seat,
      },
    });

    await specs.save();
    console.log("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ –≤ MongoDB");

    res.json(specs);
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error.message || error);
    if (error.response) {
      console.error(
        "üî• –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:",
        error.response.status,
        error.response.data
      );
      return res
        .status(error.response.status)
        .json({ error: error.response.data });
    }
    res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É" });
  }
};
